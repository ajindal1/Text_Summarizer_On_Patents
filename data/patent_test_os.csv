"publication_date","publication_number","title","abstract","Subject"
20071120,"US-7299476-B2","Method for exchanging information between operating systems coexisting on the same computer","The present invention concerns a method for exchanging information between processes, tasks or computer applications executed by different operating systems coexisting on the same computer or the same hardware platform. This method allows communication between at least two client processes executed at the same time in a hardware platform (10) comprising one or more processors and storage means, at least part of which constitutes an addressable memory area that can be used as a working memory. These client processes are executed in two different operating systems (respectively) that are not directly compatible with one another. The method is characterized in that these the client processes write or read or modify information called exchange data in at least one common part, of the addressable memory of the hardware platform. The common part comprises an exchange memory.","Operating Systems"
20030826,"US-6611878-B2","Method and apparatus for software technology injection for operating systems which assign separate process address spaces","Method and apparatus for seamlessly integrating new or modified user interface features or modified functionality, to an existing target application program ( 100 ) in the context of an operating system ( 102 ) which assigns a separate process address space for each application program then operating. The disclosed invention does not require re-compiling the existing application program';s source code. Rather, a novel approach is provided which allows a technology injection system (TIS) ( 106 ) to inject itself directly between a computer operating system ( 102 ) and the target program ( 100 ) so as to intercept and act upon messages and commands to the target program ( 100 ). In this way, the TIS ( 106 ) can modify any inputs and outputs of the target program ( 100 ). By performing special processing of those messages to the target application program ( 100 ) which determine the appearance of the target application user interface or which concern modified functionality, the TIS ( 106 ) can provide the new functionality to the target application program ( 100 ) and alter the appearance of its user interface. Interception of messages between the operating system ( 102 ) and the TIS ( 106 ) is achieved by utilizing operating system functions  116 , or any other available computer system functions, to overwrite a pointer ( 138 ) to a window procedure ( 116 ) of the target application ( 100 ), with a pointer to a surrogate window procedure ( 124 ).","Operating Systems"
20100325,"US-2010077394-A1","Coalescing periodic timer expiration in guest operating systems in a virtualized environment","Techniques are disclosed for coalescing timer ticks generated by timers used to service guest operating systems executing in virtual machines. By coalescing timer ticks a logical processor can enter a low power mode thereby reducing power consumed by the system.","Operating Systems"
20100810,"US-7774796-B2","Methods of factoring operating system functions, methods of converting operating systems, and related apparatus","Methods of factoring operating system functions into one or more groups of functions are described. Factorization permits operating systems that are not configured to support computing in an object-oriented environment to be used in an object oriented environment. This promotes distributed computing by enabling operating system resources to be instantiated and used across process and machine boundaries. In one embodiment, criteria are defined that govern how functions of an operating system are to be factored into one or more groups. Based on the defined criteria, the functions are factors into groups and groups of functions are then associated with programming objects that have data and methods, wherein the methods correspond to the operating system functions. Applications can call methods on the programming objects either directly or indirectly that, in turn, call operating system functions.","Operating Systems"
20101209,"WO-2010140706-A1","Biological and industrial operating systems","Provided are biological and industrial operating systems comprising a carrier equipped with a body-fluid based solution adjustment input unit which adjusts and inputs either a body-fluid based solution containing cells or a medium containing spheres; a separation and extraction unit which separates and extracts target particles or liquids with respect to the particles and liquids in the adjusted solution that is inputted into the aforementioned adjustment and input unit; and a means whereby the particles or liquids obtained in the aforementioned separation and input unit are subjected to analysis operation; the aforementioned carrier being such that the means thereof are connected by flow paths and that the flow paths subject the aforementioned body-fluid based solution to movement operation by means of flows generated by a physical drive means. On the basis of such a configuration, there are proposed a laboratory-on-the-disk (chip) type biological operating system wherein correct information is obtained although this system can be used in a simple way and an industrial operating system wherein true spheres, which are standard spheres, are detected.","Operating Systems"
20120527,"RU-2451989-C2","Supporting multiple operating systems in multimedia devices","FIELD: information technology. 
     SUBSTANCE: first digital multimedia data are received in a digital media player, having in memory a first operating system in a first hibernation mode and having in memory a second operating system in active move, wherein the first digital multimedia data are encoded according to a first multimedia format; the first operating system is awoken from the first hibernation mode, wherein the first operating system supports multimedia playback for the first multimedia format, and the second operating system supports multimedia playback for a second multimedia format other than the first multimedia format; and the first digital multimedia data are played back using a first application operating in the operating environment provided by the first operating system. 
     EFFECT: broader functional capabilities of playing digital multimedia data owing to support of multiple operating systems in consumer electronic devices. 
     20 cl, 7 dwg","Operating Systems"
20130424,"CN-202904561-U","Testing device for power business oriented operating systems","The utility model provides a testing device for power business oriented operating systems, and belongs to the technical field of power engineering. The testing device comprises a dispatching control module, a testing module and a switch, the dispatching control module is connected with the testing module, and the testing module is connected with servers under test through the switch. The testing device for the power business oriented operating systems is capable of directly calling the testing module to test the servers under test and connected on the switch through the dispatching control module, and is high in testing efficiency and capable of achieving automation of testing processes.","Operating Systems"
20170511,"US-2017134500-A1","System and method for creating operating systems to network physical objects or things","System for enabling the system agnostic operation of at least one functional device, comprising a first computing device communicating with functional devices for operating the devices, cloud based infrastructure, in communication with the first computing device, for storing one or more applications for operating functional devices, the applications having a common format, the first computing device sending a command to the cloud based infrastructure to transmit information about at least one application to a second computing device, the second computing device receiving the information from the cloud based infrastructure, and determining, as a function of the information, the type of device to be operated upon and whether the second computing device can operate the device with the application.","Operating Systems"
20090303,"US-7500048-B1","Transparent page sharing on commodity operating systems","Methods and systems for sharing memory pages in virtual machines are described. Guest memory pages are identified as candidate memory pages. The candidate memory pages are hashed and the hash results of the candidate memory pages are compared. A determination is made on whether a hash match exists between a first candidate memory page and a second candidate memory page. If it is determined that a hash match exists, an anonymous memory page that includes the information of candidate memory pages is created and shared. As a result, embodiments effectively reduce memory overheads by, in one example, exposing a single anonymous memory page to multiple virtual machines.","Operating Systems"
20160504,"CN-105549912-A","Storage method of server cluster capable of simultaneously containing various types of operating systems","The invention discloses a storage method of a server cluster capable of simultaneously containing various types of operating systems, and belongs to the technical field of storage. The storage method solves the problem of finding a way for a compatible linux operating system server and windows operating system server to simultaneously read and write the same storage space. The storage method adopts the technical problems that the storage method provided by the invention is the storage method of the server cluster which contains the windows operating system server and the linux operating system server on the storage spaces of different storage types, so that different types of operating system servers can simultaneously read and write the same storage space in the whole server cluster; the storage spaces are divided into a storage array, a storage server and a parallel storage file system according to storage types; a linux operating system storage server serves as the storage space; and the linux operating system storage server provides storage service for the server cluster.","Operating Systems"
20061130,"US-2006271672-A1","System and method for loading various operating systems from a remote console","A system for loading various operating systems includes a remote console ( 1 ) and multiple clients ( 3 ). The remote console includes a client controlling module ( 10 ) for checking connection statuses between the remote console and the clients, and for determining whether the already connected clients can receive orders from the remote console, and for selecting object clients from the clients that can receive orders; a code setting module ( 11 ) for selecting operating systems to be loaded in the object clients, and setting codes of disk partition sections in the object clients respectively; and an order sending module ( 12 ) for sending orders and the codes. Each client includes a receiving module ( 30 ) for receiving the orders and the codes, and executing the orders; and an amending module ( 32 ) for amending disk partition tables to configure the disk partition sections as boot sections according to the codes. A related method is also disclosed.","Operating Systems"
20120306,"US-8131986-B2","System and method for boot loading of programs within a host operating environment having one or more linked guest operating systems","A system and method for loading programs during a system boot using stored configuration data in a predetermined file system from a prior session and providing the stored configuration data to a guest operating system capable of communication with a host operating system, during start-up, within a computing environment having a hypervisor, in a predetermined manner.","Operating Systems"
20130829,"US-2013227175-A1","Electronic devices and methods for sharing peripheral devices in dual operating systems","A method for sharing peripheral devices in dual operating systems for an electronic device having at least one peripheral device is provided. The method includes: receiving a setting value for the peripheral device under the first operating system from a user; activating a second operating system; transmitting the setting value to the second operating system; and switching from the first operating system to the second operating system, wherein the second operating system sets the peripheral device with the setting value and enables the electronic device to operate under the second operating system","Operating Systems"
20070110,"EP-1742150-A1","Computer system and method for selectively installing of operating system amonf a plurality of operating systems","A computer system (100) for selectively installing an operating system from a plurality of operating systems (111, 112, 113) is provided with an operating system storage unit (110) for storing a plurality of operating systems (111, 112, 113); a selection/installation unit (120) for selecting and installing a specified operating system from the stored operating systems; a deletion unit (130) for disabling the operating systems not selected by the selection/installation unit (120) among the stored operating systems; and an install information storage unit (140) for storing information about the installed operating system.","Operating Systems"
20091105,"WO-2009132788-A1","Method for managing and handling a plurality of operating systems in a computer or computer network","In a method for managing and handling a plurality of operating systems in a computer or computer network, a management taskbar is combined with a seal function on a display means. Furthermore, the data integrity of a hypervisor operating system is authenticated using a first seal. A further seal which is simultaneously displayed in the button which is, in turn, allocated to the operating system in the taskbar managed by the hypervisor can be allocated in each further displayed operating system which has been installed on the hypervisor. If a window opened with the button is not opened in the full-image mode, the seal is additionally displayed as part of the window. Applications or data within an operating system which is protected by a seal can be provided with further seals, the respective button of which is provided with the seal. If a seal inside the chain: hypervisor, operating system, application, data is broken, the seals based thereon are no longer displayed. In order to enhance usability, individual chains are provided with a family structure in order to locate/identify the position within the working environment.","Operating Systems"
20101123,"US-7840763-B2","Methods and systems for achieving high assurance computing using low assurance operating systems and processes","A computing system contains and uses a partitioning microkernel (PMK) or equivalent means for imposing memory partitioning and isolation prior to exposing data to a target operating system or process, and conducts continuing memory management whereby data is validated by security checks before or between sequential processing steps. The PMK may be used in conjunction with an Object Request Broker.","Operating Systems"
20141010,"RU-2530332-C2","Device and method for functioning of multiple operating systems in mobile communication terminal with several modems","FIELD: radio engineering, communication. 
     SUBSTANCE: invention relates to functioning of several operating systems (OS) in a mobile communication terminal with several modems. The device includes a set of modems and a multiplexer/demultiplexer (MUX/DEMUX) module. Modems support access to different wireless networks. MUX/DEMUX module receives data of the corresponding wireless network from modems, searches operating systems corresponding to modems with a reference to an OS-modem presentation table and provides data of the corresponding modems to operating systems being searched. 
     EFFECT: combination of different specific user interfaces for different network providers in a common interface. 
     14 cl, 4 dwg","Operating Systems"
20150929,"US-9146749-B1","System and methods for updating digital signage device operating systems and registering signage devices to a global network","Aspects of the disclosure direct to systems and methods for updating the operating system of a signage device and registering the signage device to a global network. The signage device has a computer system. When booting, the BIOS of the computer system loads an installer to install a preferred operating system and client software onto a hard drive, and boots the preferred operating system and the client software from the hard drive. Once executed, the client software detects and transmits configuration information of the computer system to a management server of a Digital Signage Device Central Management System (SDCMS). The management server determines resources appropriate for the computer system based on the received configuration information, and sends the resources back to the client software. The client software then transmits signage device identifying information to the management server to register the signage device to a global network of managed signage devices.","Operating Systems"
20021210,"US-6493735-B1","Method system and computer program product for storing bi-directional language data in a text string object for display on non-bidirectional operating systems","For languages requiring bidirectional (left-to-right and right-to-left) text display support, a multi-field text string object encapsulates both a normal logical ordered version of the text string entered and a reverse ordered version in separate fields. A bidirectional-support property of the multi-field text string object is set based on whether the host system supports bidirectional text displays. In response to a display request, the multi-field text string object checks the bidirectional-support property. If bidirectional text display is supported, the multi-field text string object sets the field containing the normally-ordered character sequence for the text string as the display field. If bidirectional text display is not supported, the multi-field text string object sets the field containing the reverse-ordered character sequence for the text string as the display field. Display controls receiving the normally-ordered character sequence should display the text string with the proper directionality (right-to-left). Display controls receiving the reverse-ordered character sequence will display the display field contents with the incorrect directionality (left-to-right) but, as a result of the character sequence reversal, will effectively display the text string with the proper directionality. Bidirectional text may thus be displayed on systems which do not support bidirectional text display, using only conventional, left-to-right only directional display controls.","Operating Systems"
20140918,"US-2014280262-A1","Electronic device with a funiction of applying applications of different operating systems and method thereof","A method for applying a number of applications of different operating systems on an electronic device, the method includes: providing an icon interface module and displaying the icon interface on the display unit. Storing installation information into a shared storage area of the storage unit after an application is installed on the electronic device in one operating system. The installation information comprises an installation identifier for identifying the installation information and an icon file corresponding to the installed application. Searching whether the shared storage area of the storage unit includes the installation information, in response to an operation of returning to the icon interface. In addition, adding a corresponding icon to the icon interface according to the icon file of the installation information if yes.","Operating Systems"
20141202,"US-8904160-B2","Electronic device which automatically sets up multiple operating systems for a test system by generating an emptied boot record status and loading a target operating system according to the emptied boot record status","To reduce human resource cost, a method of automatically, consecutively setting up multiple operating systems, for an electronic device operating in an operating system, includes clearing a partition sector of the electronic device during operation of the operating system to generate an emptied boot record status, and setting up a target operating system according to the emptied boot record status and a setup procedure associated with the target operating system when the electronic device reboots.","Operating Systems"
20140716,"CN-103927227-A","Method and device for switching multiple operating systems and smart television","The invention discloses a method and device for switching multiple operating systems and a smart television. The method for switching the multiple operating systems includes the steps that at least two virtual machines are established, each virtual machine runs an operating system process, and different virtual machines run different operating system processes; a switching trigger event is acquired, and according to the switching trigger event, the currently-running operating system process is switched into a target operating system process. Due to the fact that each virtual machine can independently run one operating system process, when switching is needed, only the switching trigger event needs to be generated in the normal running process of the smart television, according to the switching trigger event, the currently-running operating system process can be switched into the target operating system process through a switching process, and therefore the problem that in the prior art, for the smart television with the multiple operating systems, in order to switch the systems, a user must repeatedly switch on and switch off the smart television so as to select the target operating system in a startup interface is solved.","Operating Systems"
20130108,"US-8352933-B2","Concurrent patching of operating systems","Replacing a computer program with a replacement version concurrently with its execution by a first instance of an operating system in a computer system, wherein a persistent memory area in the computer system is used to store selected data from the first instance. A snapshot image of a second instance of the operating system, wherein in the second instance the replacement version was executed instead of the computer program, is provided to the computer system. The execution of the first instance is suspended and the first instance is replaced with data from the snapshot image while preserving the persistent memory area. The execution of the first instance is resumed and data from the persistent memory area is restored in the first instance.","Operating Systems"
20160504,"CN-105556463-A","Selecting operating systems based on a computing device mode","A computing device in accordance with an example includes a first operating system and a second operating system. The computing device includes a communication channel to exchange data between the first and second operating systems, and a controller to select one of the first and second operating systems based on a mode of the computing device, wherein the first and second operating systems are executed substantially in parallel on a processor of the computing device.","Operating Systems"
20140603,"US-8745601-B1","Methods and systems for using data structures for operating systems","Methods and systems for creating and using data structures for operating systems. In one embodiment, a method includes receiving information indicating that a first installer is being launched for a first application program and storing, in response to the receiving of the information, first data which specifies changes to an operating system (OS) data structure that is used to configure a system to allow execution of the first application program after installing the first application program, the first data being stored separately from the OS data structure. The OS data structure may be, in one embodiment, a registry for configuring a system to execute multiple applications on the system.","Operating Systems"
20131210,"US-8607037-B2","Pre-installation environment used by operating systems","A pre-installation environment used by an operating system includes a pre-installation kit, a running unit, and a write inhibiting unit. The running unit is used for running the pre-installation kit, and generating an inhibiting signal when running to call the executable files for configuring network environment. The write inhibiting unit is used for inhibiting information generated by running the executable files from being written into a log file in response to the inhibiting signal.","Operating Systems"
20141204,"WO-2014193452-A1","Centralized management of link data for multiple applications, computers and resources, through operating systems and networked storage services","An operating system of a computer provides an interface, such as an application programming interface, through which applications on that computer can store link data in a consistent format across applications and resources. Thus, when an application stores link data, it sends a command to the operating system providing the link data, invoking a command to store the link data. When an application retrieves link data, it sends a command to the operating system to retrieve link data. Thus, an application can store link data for a history of resources accessed, favorite resources accessed, and other types of resources to be accessed. As a result, the operating system provides a single mechanism for a heterogeneous set of applications and a heterogeneous set of resources to store link data in a single repository.","Operating Systems"
20160317,"WO-2016040811-A1","Heuristic processsor power management in operating systems","Various embodiments provide techniques and devices for heuristics-based processor power management of the processor of a computing device. Processor performance metrics and workload are monitored. Processor management profiles are generated, stored, and adjusted using heuristic performance data. Appropriate power management profiles are applied to the processor to balance processor power consumption against performance expectations and enhance efficiency of processor operation.","Operating Systems"
20110525,"CN-101464843-B","Method for sharing display card in multiple operating systems and computer system thereof","The invention provides a method for sharing display card in a multi-operation system and a computer system. The method comprises the following steps: a first user operation system is detected to be displayed, and the first user operation system belongs to one user operation system in at least two user operation systems; the corresponding relationships are called to ensure that the first user operation system corresponds to a first display control register set provided with a display mode parameter; the first display control register set is connected with a display output interface; and the first user operation system is displayed according to the display mode parameter. By adopting the method and the computer system provided by the embodiment of the invention, the display card device share in a multi-operation system and quick display and output of the user operation system needs to be displayed are realized without a stimulate display card register.","Operating Systems"
20040803,"US-6769254-B2","Hydraulic operating systems for clutches and the like","The piston of a master cylinder in the power train of a motor vehicle is made, at least in part, of a thermosetting plastic material and cooperates with one or more annular seals to ensure that a source of hydraulic fluid is communicatively connected with the chamber in the housing of the master cylinder when the piston is moved by one or more springs or otherwise in a sense to increase the volume of the chamber. When a pedal or another actuator causes the piston to expel pressurized fluid from the master cylinder into a slave cylinder, the seal or seals cooperates or cooperate with the housing and/or with the piston of the master cylinder to seal the source from the chamber of the master cylinder. The slave cylinder can actuate the friction clutch between the prime mover and the transmission in the power train of the motor vehicle. The piston of the master cylinder is reciprocable by or with a piston rod by way of a ball and socket joint wherein the ball of the piston rod is held against unintentional extraction from the socket of a connector forming part of or being anchored in the piston.","Operating Systems"
20110628,"US-7971104-B2","Apparatus and methods for stabilization of processors, operating systems and other hardware and/or software configurations","Apparatus and methods for converting a processor, having a plurality of states and being operative to execute software operations stored in a memory device, into a self-stabilizing processor, comprising providing self-stabilizing watchdog hardware that, with given timing, interacts with the processor, in accordance with an interaction sequence that includes at least one trigger that sets the processor to a known state from among a set of at least one known states. Also described are applications for stabilization of operating systems and other hardware or software configurations, apparatus and methods for ensuring eventual invariance of software executed by a processor, and apparatus and methods for enforcing fixed software configurations.","Operating Systems"
20010731,"US-6269409-B1","Method and apparatus for concurrent execution of operating systems","The present invention provides an improved method and apparatus for concurrent execution of operating systems. A software abstraction layer provides an interface that allows a first operating system to run concurrently with a second operating system on the same data processing system, in which the first operating system is in communication with the base machine in the data processing system. Interaction between the second operating system and the base machine is handled by the software abstraction layer translating requests and calls from a format normally made by the second operating system to the base machine into a format that is processed by the first operating system. Request and data intended for the second operating system are received by the first operating system, sent to the software abstraction layer and translated by the software abstraction layer into a format usable by the first operating system.","Operating Systems"
20150924,"WO-2015142567-A1","Techniques for switching between operating systems","Various embodiments are generally directed to an apparatus, method and other techniques for receiving information to invoke a transition from a first operating system to a second operating system, copying a system context for the second operating system from a location of a non-volatile memory to a volatile memory, the location associated with the second operating system and transitioning from the first operating system to the second operating system using the system context for the second operating system.","Operating Systems"
20161227,"US-9529625-B2","Method and system for providing stack memory management in real-time operating systems","A method and system for providing memory management in a Real-Time Operating System (RTOS) based system are provided. The method includes creating a plurality of tasks with a two level stack scheme comprising a first level stack and a second level stack, scheduling a first task for execution by moving a stack pointer from the first level stack to the second level stack, determining whether the first task is pre-empted, allocating the second level stack to the first task in a second state if the first task is not pre-empted, changing an active task for execution, determining whether the first task relinquishes control from the second state and is waiting for a resource, moving the stack pointer back from the second level stack to the first level stack if the first task relinquishes itself and providing the second level stack for use by a second task.","Operating Systems"
20130704,"WO-2013101000-A1","Sharing wireless connection profiles between multiple operating systems","Embodiments of a system, apparatus and method for sharing wireless connection profiles between multiple OSs are generally described herein. In some embodiments, a first wireless connection may be established between a wireless communication device and an access point of a wireless network or one or more other devices of a peer-to-peer networking group while the wireless communication device is running in an OS. A wireless connection profile for the first wireless connection may be stored in a shared profiles storage associated with the device, and then may be retrieved from the shared profiles storage responsive to the device being booted in a different OS. A second wireless connection may be automatically established between the device booted in the different OS and the access point or the one or more other devices using the wireless connection profile retrieved from the shared profiles storage.","Operating Systems"
20100217,"KR-20100018387-A","Apparatus and method for supporting multiple operating systems","PURPOSE: An apparatus and a method for supporting multiple operating systems are provided to supply an integrated user interface for various operating systems, thereby increasing convenience of a user. CONSTITUTION: A server operating system(300) integrally provides a user interface for applications executed in operation systems. One or more client operating systems(400) offer a user interface about applications of operating systems of the client. The server operating system offers an integrated graphic user interface.","Operating Systems"
20101124,"CN-101894042-A","Realization method for sharing application among a plurality of operating systems, system and mobile terminal","The invention is suitable for the technical field of communication, providing a realization method for sharing application among a plurality of operating systems, a system and a mobile terminal, wherein the realization method comprises the following steps: presetting a core library file and an application layer interface in a first operating system as a main operating system and collocating an application layer interface in a secondary operating system beginning with a second operating system at the same time; controlling the application layer interface of the secondary operating system beginning with the second operating system to directly send a driving request to the core library file of the first operating system by a communication protocol between primary and secondary operating systems when the application layer interface of the secondary operating system beginning with the second operating system responds to an application software; controlling the first operating system to acquire instruction data corresponding to the driving request; and directly sending the acquired instruction data to the application layer interface of the secondary operating system beginning with the second operating system by the communication protocol between primary and secondary operating systems. The embodiment of the invention effectively saves storage space and reduces development investment of the application software.","Operating Systems"
20100415,"WO-2009158178-A3","Direct memory access filter for virtualized operating systems","Described techniques increase runtime performance of workloads executing on a hypervisor by executing virtualization-aware code in an otherwise non virtualization-aware guest operating system. In one implementation, the virtualization-aware code allows workloads direct access to physical hardware devices, while allowing the system memory allocated to the workloads to be overcommitted. In one implementation, a DMA filter driver is inserted into an I/O driver stack to ensure that the target guest physical memory of a DMA transfer is resident before the transfer begins. The DMA filter driver may utilize a cache to track which pages of memory are resident. The cache may also indicate which pages of memory are in use by one or more transfers, enabling the hypervisor to avoid appropriating pages of memory during a transfer.","Operating Systems"
20140806,"EP-2761523-A1","Provisioning of operating systems to user terminals","Methods and apparatus are provided for provisioning an operating system image from a server (2) to an untrusted user terminal (4) via a data communications network (3). A trusted device (5) such as a pocket USB device has tamper-resistant storage (9) containing bootloader logic, for controlling booting of a user terminal, and security data. On connection of the trusted device (5) to an untrusted user terminal (4), the user terminal is booted via the bootloader logic on the trusted device. Under control of the bootloader logic, a connection is established to the server (2) via the network (3) and the server is authenticated using the security data on the trusted device (5). An operating system boot image is received from the server (2) via this connection. The boot image is used to provision an operating system image from the server (2) to the user terminal (4) for execution of the operating system at the user terminal (4).","Operating Systems"
20131002,"DE-102012205301-A1","Computing architecture for control of processing of electronic data in vehicle, has virtualization layer that is adapted in infotainment and real-time automotive operating systems which are operated in parallel with head unit","The architecture has computing device for execution of electronic data processing. A first virtual machine is provided with infotainment operating system and second virtual machine is provided with real-time automotive operating system. A virtualization layer is adapted in the infotainment and real-time automotive operating systems which are operated in parallel with a head unit (10). The virtualization layer is provided to allocate different resources to the virtual machines. The real-time automotive operating system satisfies higher security than the infotainment operating system. Independent claims are included for the following: (1) vehicle; and (2) method for control of processing of electronic data in vehicle.","Operating Systems"
20111108,"US-8056084-B2","Method and system for dynamically reallocating a resource among operating systems without rebooting of the computer system","A method of allocating a resource in a computer system having a plurality of operating systems, and related system, are disclosed. In at least one embodiment, the method includes providing an advanced configuration and power interface (ACPI) operating to facilitate interactions between at least one of the plurality of the operating systems and one or more of the resource, a hardware device, and firmware, and determining whether the resource is allocated to a first of the plurality of operating systems. The method further includes ejecting the resource from the first operating system, and allocating the resource to a second of the plurality of operating systems.","Operating Systems"
20060131,"US-6993614-B2","Management methods and apparatus that are independent of operating systems","The present invention relates to a management agent that can be ran on any operating system. More specifically, the management agent of the present invention is implemented with a set of application program interfaces (APIs) that allows the management agent to be independent of operating systems. The APIs makes the management agent portable across multiple operating systems. In an embodiment of the present invention, a Compact Peripheral Component Interconnect (CPCI) computer system includes a CPCI chassis, a circuit board located within the CPCI chassis, a first central processing unit (CPU) card coupled with the circuit board. The CPCI computer system also includes a second CPU card coupled with the circuit board, a first management agent located within the first CPU card, and a second management agent located within the second CPU card. The first and second CPU cards each respectively has a first operating system and a second operating system.","Operating Systems"
20031105,"GB-2388213-A","Improvements relating to task dispatch in priority pre-emptive real-time operating systems","A method, computing device, operating system and configuration tool for optimising or at least improving task dispatch in a priority pre-emptive real-time context are disclosed. Tasks making up an operating system are categorised into various classes in accordance with various task attributes, such as need to save floating point context, need to save digital signal processor context and the like. Each class contains only tasks having a unique combination of attributes. An individual subdispatcher function is then generated for each class, the subdispatcher function being adapted to handle tasks within that class with high efficiency. In this way, unnecessary saving and loading of contexts is reduced, and operating efficiency is improved.","Operating Systems"
20160412,"US-9311125-B2","Apparatus and method of supporting plurality of operating systems","An apparatus is provided for supporting a plurality of operating systems by single hardware, wherein the plurality of operating systems include a server operating system to provide an integrated user interfaces for applications running on the plurality of operating systems, and at least one client operating system to provide a user interface for applications running on the client operating system through the server operating system under the control of the server operating system.","Operating Systems"
20090708,"CN-101477511-A","Method and apparatus for sharing memory medium between multiple operating systems","The invention discloses a method and a device for realizing that a plurality of operation systems share a storage medium. The method comprises the following steps: an appointed first operation system in the operation systems directly operates the shared storage medium; when any second operation system in the operation systems needs to operate the shared storage medium, the second operation system informs the first operation system of an operation request through a inter-core communication mechanism; and the first operation system completes the operation to the shared storage medium according to the operation request and informs the second operation system of the operation result through the inter-core communication mechanism. The technical scheme of the invention is simple and efficient.","Operating Systems"
20101005,"US-7809896-B2","Efficient sharing of memory between applications running under different operating systems on a shared hardware system","A system, method and computer program product for efficient sharing of memory between first and second applications running under first and second operating systems on a shared hardware system. The hardware system runs a hypervisor that supports concurrent execution of the first and second operating systems, and further includes a region of shared memory managed on behalf of the first and second applications. Techniques are used to avoid preemption when the first application is accessing the shared memory region. In this way, the second application will not be unduly delayed when attempting to access the shared memory region due to delays stemming from the first application';s access of the shared memory region. This is especially advantageous when the second application and operating system are adapted for real-time processing. Additional benefits can be obtained by taking steps to minimize memory access faults.","Operating Systems"
20171214,"US-2017358278-A1","Method and electronic apparatus for providing composition screen by composing execution windows of plurality of operating systems","An electronic apparatus and method of operating the electronic apparatus, to simultaneously display execution screen images of a first OS and a second OS are provided. The method includes obtaining screen image data of the second OS based on graphic data processed by the second OS; obtaining, by the first OS, at least one of control information related to the screen image data of the second OS and memory mapping information of the second OS; converting the screen image data of the second OS into graphic data of the first OS based on the at least one of the control information and the memory mapping information; generating screen image data of the first OS based on the graphic data of the first OS, the screen image data of the first OS including the screen image data of the second OS; and displaying the screen image data of the first OS.","Operating Systems"
20100325,"WO-2009093226-A3","A method and apparatus for fingerprinting systems and operating systems in a network","A system and method for identifying the number of computer hosts and types of operating systems behind a network address translation is provided. The method includes processing an Internet protocol packet associated with the host computer system. The process may involve capturing the Internet protocol packet and extracting key fields from the Internet protocol packet to produce a fingerprint. The method continues with analyzing the fields in order to determine if a network address translator is connected between the host computer and a public network (e.g. the Internet). If there is a network address translator connected, fields may be analyzed in order to determine the number of computers using the network address translator. The fields may also be analyzing in order to determine with a level of probability that the fingerprint identifies the correct operating system running the host computers. Generally, the Internet protocol packet that is analyzing will be captured from an aggregation point in the carrier network.","Operating Systems"
20120710,"US-8219992-B2","Data processing system having a plurality of processors and operating systems","Management programs for concealing differences in hardware configuration and OS are operated and stayed resident every OS. A database manipulated by the management programs is prepared. The database defines correspondences between tasks for hardware control and software processing, which are processed under the control of the OSs and their attached OSs, over the OSs. When the corresponding management program detects a startup request of a task, the management program extracts an entry corresponding to the task from the database. If an attached OS owned by the extracted entry is its own OS, then the task is processed under the control of the corresponding OS. If the attached OS owned by the extracted entry is other OS, then the startup request is passed to a processor of the other OS, where the task is processed.","Operating Systems"
20160929,"WO-2016040797-A3","Integrating operating systems","A method and apparatus for integration of operating systems solve the problem in the conventional techniques with low efficiency in switching among the operating systems. The techniques of the present disclosure firstly starts a first operating system and its agent process, and then starts a second operating system, wherein the second operating system may call the agent process to request the first operating system for resources required by the second operating system. The second operating system may directly request the first operating system for the needed resources, which realizes the coexistence of the first operating system and the second operating system without mutual switching between the operating systems.","Operating Systems"
20041125,"WO-03091878-A3","Reduced overhead context-saving in static priority scheduled operating systems","There are disclosed methods, computing devices and software products that seek to reduce memory/processor overheads in static priority scheduled operating systems by reducing the number of resource contexts that need to be saved and restored when running a plurality of tasks. This may be achieved by forming mutually-exclusive non-pre-emption groups of tasks, and/or by determining which tasks share a common resource.","Operating Systems"
20011002,"US-6298390-B1","Method and apparatus for extending traditional operating systems file systems","In a computer system having a kernel supporting an interface definition language, a file system composed of an object framework. The object framework includes a set of proxy vnodes, a set of memcache vnodes, and a set of storage vnodes. The set of proxy vnodes and the set of memcache vnodes are linked to the set of storage vnodes through the use of the interface definition language, and the set of proxy vnodes are linked to the set of memcache vnodes through the use of a set of pointers. Each proxy vnode of said set of proxy vnodes is typed so as to differentiate between a set of file system objects such as files, directories and devices. The set of memcache vnodes forms an interface to a virtual memory system while the set of storage vnodes forms an interface to an underlying file system. The file system also uses a set of file paging interfaces that support extensions to the file system while providing full coherence of data.","Operating Systems"
20100120,"CN-101630353-A","System and method to secure boot uefi firmware and uefi-aware operating systems on a mobile internet device (mid)","The invention relates to a system and method to secure boot UEFI firmware and UEFI-aware operating systems on a mobile internet device. In some embodiments, the invention involves adding a capability for a platform owner or administrator to ensure that the firmware is only executed in an owner-authorized fashion, such as with signed components managed by a security processor. Embodiments may extend the Core Root of Trust for Measurement (CRTM), via use of a cryptographic unit coupled to the security processor in a mobile Internet device (MID) as a Root-of-Trust for Storage (RTS) Storage Root Key (SRK), into a unified extensible firmware interface (UEFI) Platform Initialization (PI) image authorization and boot manager. Other embodiments are described and claimed.","Operating Systems"
20130710,"CN-103197941-A","Method and system for application data interaction of operating system with other operating systems","The invention discloses a method and a system for application data interaction of an operating system with other operating systems. The method comprises the steps as follows: connecting a terminal equipped with a first operating system with a server; and simulating the environment of a second operating system on the server, and installing and running an application of the second operating system. The system comprises the terminal equipped with the first operating system, as well as the server for simulating the environment of the second operating system, wherein the terminal and the server are connected through a network, and the operating system on the terminal of the first operating system is subjected to data interaction with the application on the server through the network. Due to the method and the system, the applications of another operating system can be applied directly on one operating system, therefore, the developing cost and time are saved, and the effects are remarkable.","Operating Systems"
20071016,"US-7284142-B2","Real time interrupt module for operating systems and time triggered applications","An interrupt timer module comprises a prescale counter (PSC) incremented by a real-time interrupt clock signal (RTICLK), a prescale compare value register (CVR) storing a configurable value (PCV), a comparator comparing the current count of the prescale counter (PSC) with the stored configurable value (PCV), a free running counter (FRC) incremented by a match from the comparator, and a plurality of interrupt generation units (IGU 0 , IGU 1 , IGU 2 ) Each interrupt generation unit (IGU 0 , IGU 1 , IGU 2 ) comprises a compare value register (CVR 0 , CVR 1 , CVR 2 ) storing a compare value and a comparator comparing the compare value from the respective compare value register with the current count of the free running counter providing one or both of an interrupt signal (INT 0 , INT 1 , INT 2 ) and a direct memory request signal (DMAREQ 0 , DMAREQ 1 , DMAREQ 2 ) upon a match.","Operating Systems"
20170704,"US-9696983-B2","Dynamic updating of operating systems and applications using volume attachment","Examples disclosed herein provide systems, methods, and software to attach updated applications to computing devices. In one instance, a method of attaching updated applications to a computing device includes identifying an application update for an application stored on the computing device, and determining an updated application volume containing an updated version of the application. The method further includes mounting the updated application volume to the computing device, and overlaying the updated version of the application with the application stored on the computing device.","Operating Systems"
20141209,"US-8909913-B2","Method for integrating heterogeneous operating systems based on the same system kernel using a shared information area accessible to multiple operating systems","An application method for integrating heterogeneous operating systems based on the same system kernel is disclosed. The application method includes opening a master virtual console corresponding to a master operating system, opening a slave virtual console corresponding to a slave operating system in the master virtual console, and establishing a share information area for the master operating system and the slave operating system and switching to slave virtual console to operate on the slave operating system.","Operating Systems"
20120424,"US-8166288-B2","Managing requests of operating systems executing in virtual machines","A coordinator in a computer system receives a request from one of a plurality of operating systems (that coexist in the computer system) to invoke a service of a management routine in the computer system. The plurality of operating systems execute in respective virtual machines of the computer system. The coordinator processes the received request to invoke the service of the management routine to prevent a conflict from occurring with respect to at least another one of the plurality of operating systems.","Operating Systems"
20100209,"US-7661104-B2","Task following between multiple operating systems","A processor may utilise two operating systems (Non-Secure, Secure) between which calls may be made. In order that a second operating system can track task switches made by a first operating system, each time a call is made to the second operating system, this call includes an identifier to enable discrimination between the task which was executing on the first operating system when that call was made. The identifier can be a call identifier and/or a target thread identifier and may include further parameters.","Operating Systems"
20140423,"CN-103746826-A","Method for automatically detecting and identifying operating systems of host computers in network","The invention discloses a method for automatically detecting and identifying operating systems of host computers in the network. The method comprises the follow steps of (1) detecting on-line equipment in the network, (2) sending explorer packets to the on-line equipment, and (3) determining the operating system of the host computers. According to the method for automatically detecting and identifying the operating systems of the host computers in the network, different modes are adopted to scan equipment in the network, and further most of the host computers and the operating systems thereof in the network can be automatically detected, so that problems the manual type-in workload of an administrator is large and errors occur easily are solved, and problems that network host scanning by means of a single protocol is inaccurate and information is incomplete are tackled.","Operating Systems"
20060615,"US-2006130000-A1","System and method for operating systems","If a plurality of operating systems are running in one computer and each of those operating systems has its own managed time, which is different from others, then trace log information items collected by those operating systems and merged in order of their generated times may not be as they are generated actually. In order to avoid such a problem, therefore, the present invention provides an operating system management system with recording means for storing a check point trace in the operation trace information of each of those operating systems, thereby finding the correspondence among those check point traces by searching the operation trace information item of each operating system, then adding such additional information as a time difference, a counter value, etc. to the operation trace information. Thus, even when each operating system has its own managed time different from others, it is possible to manage the sequence of events recorded in those operating systems correctly, thereby finding the sequence in which the trace information items of those operating systems are actually generated.","Operating Systems"
20090825,"US-7581229-B2","Systems and methods for supporting device access from multiple operating systems","A host operating system can take ownership of a device. The host can project the presence of a device proxy (VDP) into a guest operating system. The VDP provides a set of device functions corresponding to the particular device class. Interactions with the VDP in the guest are forwarded to a Virtual Service Provider (VSP) in the host. The VSP maps a set of device class functions onto physical devices through a hardware abstraction and emulation layer. Functions supported directly by a physical device can be delivered to the device by the hardware abstraction layer (HAL). Functions not directly supported can be implemented through the hardware emulation layer (HEL). A uniform and robust set of functions may be made available in the guest regardless of hardware changes in the host, migration to a new host, or use of the device by other competing operating systems.","Operating Systems"
20130730,"US-8499142-B1","UEFI boot loader for loading non-UEFI compliant operating systems","A UEFI compliant firmware is disclosed that includes a UEFI legacy boot loader. The UEFI legacy boot loader provides functionality for loading operating systems that are non-UEFI compliant in a performant manner. In particular, the UEFI legacy boot loader provided in one embodiment disclosed herein is configured to utilize UEFI disk services to load an O/S kernel and other O/S components. Once the UEFI legacy boot loader has completed loading the O/S components, the UEFI legacy boot loader enables interrupt handling by the O/S, relocates O/S real mode kernel setup code to a low memory region (below 1 MB), and switches a processor to a real mode of operation. The UEFI legacy boot loader then causes the real mode kernel setup code to be executed on the processor, to thereby complete the loading of the operating system.","Operating Systems"
20030312,"EP-1127314-A4","Method and system for maintaining restricted operating environments for application programs or operating systems","A method for protecting an operating environment on a processor from a rogue program operating on the processor comprising isolating simultaneously executing programs or operating systems is disclosed (502). Memory space for use only by the first program (306) while the first program executing is allocated (504). Communication between the first program and the computer';s operating environment is accomplished through a single link employing one of several methods including using shared memory space (508), a dedicated interrupt or a dedicated I/O port (510). The monitor manages (546) a restricted operating environment for the first program (306) on the processor, the restricted operating environment preventing the first program from accessing resources on the processor except for the allocated memory space and the single communication link (516-522).","Operating Systems"
20140918,"WO-2014143872-A1","Diagnostic tool with a plurality of operating systems","A diagnostic tool may include a user interface operating system comprising a computer processor that operates in a first operating environment. The diagnostic tool may also include a vehicle diagnostic operating system comprising a computer processor that operates in a second operating environment, wherein the second operating environment is different from the first operating environment.","Operating Systems"
20130911,"CN-103297504-A","Method for quickly deploying operating systems in physical bare computers in cloud data center","The invention discloses a method for quickly deploying operating systems in physical bare computers in a cloud data center. The method includes (1), starting a server A, and installing dnsmasq service and ';bare computer deployment Daemon'; service on the server A; (2), powering on a bare computer B and booting the bare computer B in a PXE (pre-boot execution environment) mode, and enabling the server A to distribute an IP (internet protocol) address to the bare computer B; (3), enabling the server A to transmit a Ramdisk to the bare computer B; (4), enabling the bare computer B to run the Ramdisk; (5), enabling an iSCSI (internet small computer system interface) target from the bare computer B to be mounted on the ';bare computer deployment Daemon'; service of the server A and dividing the iSCSI target into an operating system main partition and an operating system swap partition; (6), enabling the ';bare computer deployment Daemon'; service on the server A to copy a preliminarily defined operating system image file on the operating system main partition which is formed in the step (5), and modifying a grub boot file in the operating system main partition; (7), enabling the Ramdisk on the bare computer B to execute a restart command after the Ramdisk on the bare computer B completely receives notification of operation completion from the server A, and booting the bare computer B via a hard disk. The method has the advantage that the installation efficiency can be greatly improved.","Operating Systems"
20151203,"US-2015347052-A1","Virtualisation supporting guest operating systems using memory protection units","A processor ( 20 ) is provided with a first memory protection unit ( 38 ) applying a first set of permissions and a second memory protection unit ( 40 ) applying a second set of permissions. A memory access will only be permitted if both the first set of permissions and the second set of permissions are satisfied. The processor also includes a memory management unit ( 42 ) which serves to translate from virtual addresses VA to physical addresses PA. A selectable one of the first memory protection unit ( 38 ) and the memory management unit ( 42 ) is active at any given time under control of a selection bit set by a hypervisor program ( 2 ) executing at an exception level with higher privilege than the exception level at which the guest operating systems execute.","Operating Systems"
20090527,"EP-2017733-A3","Real time operating systems","A virtual machine environment (VME) for interfacing a real time operating system (RTOS) environment with a native host operating system (HOS) is described. The VME comprises: at least one virtual I/O service for emulating a hardware service available to the native HOS, the at least one virtual I/O service enabled to generate a notification when data is transmitted from the at least one virtual I/O service to the RTOS environment; a non blocking messaging queue for exchanging data between the RTOS environment and the at least one virtual I/O service; an interrupt emulator in communication with the at least one virtual I/O service for generating an interrupt in response to receiving the notification, the interrupt for triggering the RTOS environment to poll the non-blocking message queue to retrieve data from the non-blocking message queue; a hardware exception handler emulator in communication with the interrupt emulator for relaying the interrupt to the RTOS environment, the hardware exception handler emulator further enabled to manage interrupts and exceptions from the native HOS such that the interrupts and exceptions from the native HOS appear to the RTOS environment as if they had occurred on hardware running the RTOS environment natively; and a supervisory instruction emulator in communication with the hardware exception handler emulator, for emulating supervisory instructions executed by the RTOS environment.","Operating Systems"
20130918,"EP-2640154-A1","Method of enabling proximity based connectivity  between mobile devices using different operating systems","A method and system for enabling cross-platform connectivity and operable communication between two portable communication devices, operating through different operating systems, operably connects the two devices to a service infrastructure through a network. A unique identifier of the first device is retrieved and communicated to the service. Bluetooth or WLAN operation of the two devices is enabled. The second device detects any other device in proximity, within the network, and delivers identifying information of the detected devices to the service. If the identifying information corresponds to the identifier of the first device registered with the service, the service sends a push notification message to a push notification service corresponding to the first device. The push notification service sends an alert to the first device notifying the first device that it has been detected. Connectivity and operable communication between the two devices is enabled.","Operating Systems"
20140522,"WO-2014077702-A1","Security system and method for operating systems","A device comprising an operating system to run processes and a middleware layer operable to launch applications. An application launched by the middleware layer is run using one or more processes in the operating system. The operating system has a user layer and a kernel wherein the processes run in the user layer and interact with other processes running in the user layer through the kernel, the interaction being in response to calls to the kernel made by the processes. The device has one or more policy files defining policies for interaction of processes with the kernel of the device, and monitor code configured to monitor interaction of a process with the kernel to link or associate defined policies to the process, and to read code defined in the policy file or files linked or associated to the process.","Operating Systems"
20101228,"US-7861225-B2","System and method to combine debugging messages from diverse applications or operating systems executed within a mobile device","The present invention provides a debugging application operable to synchronize debug information associated with multiple software components to a common frame of reference. These multiple software components may be executed on a common platform and may have distinct diagnostic applications associated with them. This debugging application includes a first diagnostic application operable to gather output diagnostic information associated with the first software application. A second diagnostic application gathers output debug information associated with a second software application. A diagnostic agent receives the diagnostic information associated with both the first software application and the second software application and may combine these using a common frame of reference. This information may then be outputted by the debugging application to an external diagnostic monitor. This eliminates the need for individual operators to cross-reference sources of debug information and in so doing provide an improved debugging environment for development and testing of both application and operating system software applications.","Operating Systems"
20130613,"US-2013152074-A1","Method for automatic consecutive installing operating systems","A method for automatic consecutive installing operating systems is disclosed. The method includes establishing a transmission link between a server device and a device under test (DUT), downloading a preinstallation environment module from the server device via the transmission link, utilizing the preinstallation environment module to perform a boot process, obtaining an installation file from the server device and installing a first operating system on the DUT according to the installation file, modifying the installation file to indicate that a second operating system is a next installation operating system, and utilizing the preinstallation environment module to perform a boot process again and installing the second operating system on the DUT according to the modified installation file.","Operating Systems"
20050825,"WO-2005079047-A1","Method of operating systems comprising communication services","A method of operatively handling data systems that include communications services, particularly telephone and data services, wherein a computer system (1) is adapted to execute a service in accordance with a data program and also adapted to process log data, wherein said computer system includes databases (10-12, 13, 14, 18) of which at least one database (13, 14) is caused to contain a predetermined number of transactions of which each transaction has the form of parts of a data program, and wherein said computer/system is caused to fetch one or more transactions from said database or said databases, said transactions together forming a data program for executing said service or said processing function. The invention is characterized in that an interface (20) between an administrative part (2) of the data system (1) and an all-embracing part (15) of the data system, and also an interface between an operative part (3) of the data system and the all-embracing part (15) of the data system wherein said interfaces are mutually the same; in that the all-embracing part (15) has an executing environment such that execution in the all-embracing system and instructions from the all-embracing system to other parts (2, 3) of the data system takes place through the agency of said transaction.","Operating Systems"
20040519,"GB-2395313-A","Thread switching between multiple operating systems running on the same processor","A method, apparatus or program, wherein threads execute under different operating systems running on the same processor. A first thread on a first operating system, generates a call, triggered by the first thread, to execute a second thread in the second operating system. Preferably the call includes an identifier to enable the second operating system to discriminate between threads on the first operating system. The second operating system can also use the identifier to switch to an inactive thread or to reject a call if it requires exclusive access to a resource currently in use by a different thread running on the second operating system. The call may be made using a software interrupt instruction. Switches between processing under control of the different operating systems preferably takes place by executing a monitor mode program (figure 2) where the first operating system executes in a non-secure domain and the second in a secure domain.","Operating Systems"
20160906,"US-9436698-B2","Sharing a file system between multiple operating systems","For sharing a file system between multiple operating systems, a method is disclosed that includes sharing a file system between two or more operating systems, the two distinct operating systems concurrently operating on a computing device, determining, by a processor, that one of the two or more operating systems has an altered need for the file system, and changing interfaces to the file system based on the altered need.","Operating Systems"
20170125,"CN-106357761-A","Distributed message communication middleware implementation software system on basis of real-time operating systems","The invention provides a distributed message communication middleware implementation software system on the basis of real-time operating systems. The distributed message communication middleware implementation software system comprises a link layer, a communication process control layer, a management layer and an application programming interface layer. The link layer is used for physical address addressing, data framing, traffic control, data error detecting and data retransmission; the communication process control layer is adaptive to low-level transmission by means of novel communication process control protocol adding; the management layer is used for establishing, maintaining or deleting communication groups and handling errors and timeout which occur in service processes for transmitting data by the aid of distributed message communication middleware; the application programming interface layer is used for providing programming interfaces and transmitting messages by means of invoking the programming interfaces. The distributed message communication middleware implementation software system has the advantages that one-to-many and many-to-one data communication can be implemented, the data communication efficiency is not lower than 80% of the data communication efficiency during direct drive invoking, the distributed message communication middleware implementation software system is easy to expand, and links can be automatically selected in communication processes.","Operating Systems"
20060817,"US-2006184713-A1","Method for operating a virtual machine computer system running guest operating systems on a central processing means virtualized by a host system having register stack engine functionality","A method for operating a virtual machine computer system running computer guest operating system processes on a central processing means in a virtualized manner includes the steps of checking the virtual TLB entry for the backing store address of the register stack engine (RSE) by the VMM and in case there is no valid TLB entry calling the guest interrupt handler, inserting valid TLB entry for the backing store address, returning to VMM, calling and proceeding with guest process.","Operating Systems"
20140923,"US-8843733-B2","Switching between multiple operating systems (OSes) using sleep state management and sequestered re-baseable memory","Embodiments of switching between multiple operating systems (OSes) using sleep state management and sequestered re-baseable memory are generally described herein. Embodiments of the invention allow one OS to be suspended into S3 or sleep mode, saving its state to memory and turning off its devices. Then, another sleeping OS can be resumed from another location in memory by switching a memory base addressed to a sequestered memory region and restoring its device state. Other embodiments may be described and claimed.","Operating Systems"
20041026,"US-6810478-B1","System for remote booting of muntliple operating systems using chained bootstrap mechanism in a network","A chained bootstrap that is identified on a Boot Image Negotiation Layer (BINL) server and which is specified as the default bootstrap for the remote booting of client machines without regard to what client OS will finally be booted, is provided. The default bootstrap is downloaded as the initial bootstrap when the client sends the remote boot request to the TFTP boot server identified by the BINL server. This bootstrap then acquires a configuration file for the client from the TFTP server and determines the specific OS and associated bootstrap to download to the client. The chained bootstrap then relocates itself in memory on the client so that the actual client OS bootstrap can load and execute properly. The chained bootstrap then requests the actual client bootstrap from the TFTP server to continue the boot of the OS.","Operating Systems"
20100610,"WO-2010064277-A1","Techniques for managing processor resource for a multi-processor server executing multiple operating systems","A multiprocessor server system executes a plurality of multiprocessor or single-processor operating systems each using a plurality of storage adapters and a plurality of network adapters. Each operating system maintains load information about all its processors and shares the information with other operating systems. Upon changes in the processor load of the operating systems, processors are dynamically reassigned among operating systems to improve performance if the maximum load of the storage adapters and network adapters of the reassignment target operating system is not already reached. Processor reassignment includes shutting down and restarting dynamically operating systems to allow the reassignment of the processors used by single-processor operating systems. Furthermore, the process scheduler of multi-processor operating systems keeps some processors idle under light processor load conditions in order to allow the immediate reassignment of processors to heavily loaded operating systems. &lt;br&gt;&lt;/br&gt; (Selected Drawing: Fig. 1)&lt;br&gt;&lt;/br&gt;","Operating Systems"
20150708,"CN-104765623-A","Data processing method of multiple operating systems and terminal equipment","The invention discloses a data processing method of multiple operating systems and terminal equipment, wherein the terminal equipment comprises a display area and can simultaneously operate multiple operating systems in a split-screen display method; the method comprises the following steps of triggering and responding user operations, receiving control commands, and processing the data according to the control commands and multiple operating systems simultaneously operated.","Operating Systems"
20071018,"US-2007245163-A1","Power management in computer operating systems","An apparatus and method are provided for power management in a computer operating system. The method includes providing a plurality of policies which are eligible to be selected for a component, automatically selecting one of the eligible policies to manage the component, and activating the selected policy to manage the component while the system is running without rebooting the system.","Operating Systems"
20131212,"US-2013332456-A1","Method and system for detecting operating systems running on nodes in communication network","Fingerprinting operating systems running on nodes in a communication network. Responsive to obtaining an event to be analyzed with respect to a given node, generating a group of two or more OS profiles matching the event; generating a sufficient set of one or more significant events, i.e. events obtained in order to identify, among the matching OS profiles in the generated group, the OS profile uniquely characterizing the OS running on the given node; upon obtaining a significant event from the given node, generating a new group of one or more matching OS profiles, wherein said new group is generated in accordance with said obtained significant event and at least, with one event previously analyzed with respect to the given node; and identifying the OS running on the given node with the help of said generated new group of one or more matching OS profiles.","Operating Systems"
20101111,"US-2010287424-A1","Method of writing an operating systems (OS) image to a semiconductor device and the semiconductor device","Example embodiments are directed to a method of writing an Operating System (OS) image to a semiconductor device having a data storage device, an Application Specific Integrated Circuit (ASIC), and a non-volatile memory. The method includes initializing a DRAM interface of the ASIC using a boot loader, receiving the OS image input from a data writer to the semiconductor device through the DRAM interface; and writing the OS image into the non-volatile memory of the semiconductor device using a Flash Translation Layer (FTL) code.","Operating Systems"
20041229,"WO-2004088508-A3","A method of creating software that is portable across different operating systems","The invention provides a technique for producing software that is `portable';, i.e. is compatible with two or more different operating systems. First and second software applications are generated from source code written for a first OS; both software applications can however run on a second OS when each referencing interface libraries that (a) mimic the APIs for the first OS and (b) also interface to APIs that are native to the second OS. The applications are each tightly integrated with different instances of interface libraries that are not shared between the first and second applications.","Operating Systems"
20031126,"EP-1365323-A1","Method to exchange information between operating systems hosted on a same computer","Method for communicating between at least two client processes (13, 23) running in a single or multi-processor computer system under different operating systems (11, 21), with a shared memory that is divided into working memory and addressable memory. The operating systems each manage their own system resources, but cannot communicate directly. Accordingly an area of memory is defined as a shared exchange memory that can be accessed by both operating systems.","Operating Systems"
20040205,"KR-100417778-B1","Method and system for supporting multiple operating systems on the same disk running on different computers at the same time","A method and system for running, on different computers at the same time, multiple operating systems from the same shared system resource is provided. This is accomplished, for example, by using persistent elemental disk reservations. Each machine reads the master boot record without reservation to determine the partition of the operating system to be booted. Each machine then makes an elemental exclusive write persistent reservation for accessing the operating system boot partition. This is followed by each machine making another elemental exclusive write persistent reservation for accessing the operating system partition itself. Each machine is assigned a different operating system partition even if they are running the same operating system. The unique reservation key for these reservations is created from at least on of a Processor ID, a Cluster ID, a Multiple Processor partition ID, a Non-Uniform Memory Access complex ID, and/or a Non-Uniform Memory Access node ID.","Operating Systems"
20131010,"US-2013268357-A1","Methods and/or systems for an online and/or mobile privacy and/or security encryption technologies used in cloud computing with the combination of data mining and/or encryption of user';s personal data and/or location data for marketing of internet posted promotions, social messaging or offers using multiple devices, browsers, operating systems, networks, fiber optic communications, multichannel platforms","A method, apparatus, computer readable medium, computer system, wireless or wired network, or system to provide an online and/or mobile security of a user';s privacy and/or security method of internet or mobile access or system, apparatus, computer readable medium, or system using encryption technologies and/or filters to access data, encrypt and/or decrypt data, sync data, secure data storage and/or process data using cloud technology across many different networks and/or fiber optic communications from an endpoint accessed through multiple devices, browsers, operating systems, networks, servers, storage, software, applications or services integrated in a public cloud or a private cloud within an enterprise, a social network, big data analytics or electronic surveillance tracking or some mashup of two or more to prevent the unauthorized collecting, tracking and/or analysis of a user';s personal data by a third party and/or for generating relevant advertising, mobile, internet social messaging, internet posted promotions or offers for products and/or services.","Operating Systems"
20140826,"US-8819483-B2","Computing device with redundant, dissimilar operating systems","The adverse impact of system abnormalities, such as crashes or other failures or problems, is minimized by switching control of a computing device from a first operating system to a second operating system in the event a system abnormality is detected. For example, if a system abnormality causes a processor system under control of the first operating system to crash, another processor system under control of a second operating system can take over. An application program that was executing under control of the first operating system when the crash or other abnormality occurred can continue functioning under control of the second operating system.","Operating Systems"
20060316,"US-2006059328-A1","Data processing system having a channel adapter shared by multiple operating systems","A channel adaptor is provided which can be shared by a plurality of operating systems (OS';s) running in a data processing system, by generating an address translation table without changing input/output process control data. A plurality of OS';s execute an input/output process for the channel adaptor by using input/output process control data having different identifiers, without sharing the input/output process control data for the channel adaptor by different OS';s. The data processing system generates one virtual address translation table from a plurality of address translation tables generated by OS';s, and the channel adaptor processes the input/output control data of OS';s by using the virtual address translation table.","Operating Systems"
20150429,"CN-104583948-A","Layout and execution of operating systems using BPRAM","A software layout system is described herein that speeds up computer system boot time and/or application initialization time by moving constant data and executable code into byte-addressable, persistent random access memory (BPRAM). The system determines which components and aspects of the operating system or application change infrequently. From the information, the system builds a high performance BPRAM cache to provide faster access to these frequently used components (including the kernel). The result is that kernel or application code and data structures have a high performance access and execution time with regard to memory fetches. Accordingly, the software layout system provides a faster way to prepare operating systems and applications for normal operation and reduces the time spent on initialization.","Operating Systems"
20140619,"US-2014173440-A1","Systems and methods for natural interaction with operating systems and application graphical user interfaces using gestural and vocal input","Systems and methods for natural interaction with graphical user interfaces using gestural and vocal input in accordance with embodiments of the invention are disclosed. In one embodiment, a method for interpreting a command sequence that includes a gesture and a voice cue to issue an application command includes receiving image data, receiving an audio signal, selecting an application command from a command dictionary based upon a gesture identified using the image data, a voice cue identified using the audio signal, and metadata describing combinations of a gesture and a voice cue that form a command sequence corresponding to an application command, retrieving a list of processes running on an operating system, selecting at least one process based upon the selected application command and the metadata, where the metadata also includes information identifying at least one process targeted by the application command, and issuing an application command to the selected process.","Operating Systems"
20090310,"US-7503049-B2","Information processing apparatus operable to switch operating systems","An information processing apparatus switches between an Operating System  1  and an Operating System  2  during operation and comprises: a storing unit including a first area storing data managed by OS 1 , a second area storing a reset handler containing instructions for returning to OS 2  and for branching to OS 2 , and a switching unit that switches connection/disconnection of the first area with outside; a table storing unit storing information showing the reset handler';s position; a CPU having a program counter and executing an instruction at a position indicated by positional information in the program counter; and a management unit that, when instructed to switch from OS 1  to OS 2  while the apparatus is operating with OS 1 , instructs the switching unit to disconnect the first area and the CPU to reset. When instructed to reset itself, the CPU initializes its state and sets the reset handler positional information into the program counter.","Operating Systems"
20131106,"CN-103383652-A","Switching method for operating systems of computer platform","The invention is suitable for the technical field of computers and provides a switching method for operating systems of a computer platform. The computer platform comprises an internal memory device with a plurality of physical blocks; the physical blocks map a plurality of logic blocks; each physical block and the logic block mapped by the physical block correspond to a logic block addressing system. The method comprises the following steps: establishing an associated information table for the operating systems and the logic block addressing systems; receiving a command of switching the current operating system to a target operating system, and then inquiring the logic block addressing systems corresponding to the current operating system and the target operating system according to the associated information table; switching the logic block addressing system corresponding to the current operating system to the logic block addressing system corresponding to the target operating system. Therefore, through the switching method, the operating systems can be switched conveniently through the logic block addressing systems.","Operating Systems"
20170411,"US-9619120-B1","Picture-in-picture for operating systems","Aspects of the subject technology relate to scaling an application window. A method includes determining a first window size for an application, and instructing the application to render at the first window size. The method also includes determining a second window size for the application, scaling the first window size to the second window size based on a scale value, and displaying the scaled application at the second window size. The scaling allows a full-screen view of the application to be displayed on a smaller window, or allows shrinking the application window to a size below a normal minimum window size. Inputs to the scaled window are also scaled so that the application continues to behave as if rendered at the first window size.","Operating Systems"
20121204,"US-8327174-B2","Loading operating systems using memory segmentation and ACPI based context switch","Methods, systems, apparatuses and program products are disclosed for managing multiple OSes within a single computer and the like. 
     Provision is made for swapping OSes with BIOS assistance and conforming with ACPI features for System State management especially as related to ACPI system sleep State S3.","Operating Systems"
20030311,"US-6532538-B1","Method and system for supporting multiple operating systems on the same disk running on different computers at the same time","A method and system for running, on different computers at the same time, multiple operating systems from the same shared system resource is provided. This is accomplished, for example, by using persistent elemental disk reservations. Each machine reads the master boot record without reservation to determine the partition of the operating system to be booted. Each machine then makes an elemental exclusive write persistent reservation for accessing the operating system boot partition. This is followed by each machine making another elemental exclusive write persistent reservation for accessing the operating system partition itself. Each machine is assigned a different operating system partition even if they are running the same operating system. The unique reservation key for these reservations is created from at least on of a Processor ID, a Cluster ID, a Multiple Processor partition ID, a Non-Uniform Memory Access complex ID, and/or a Non-Uniform Memory Access node ID.","Operating Systems"
20141016,"US-2014309886-A1","Splitting mission critical systems and infotainment between operating systems","Methods and systems for a using different operating systems executing on a common microprocessor for isolating performance of vehicle infotainment from performance of non-vehicle infotainment tasks, functions, and operations.","Operating Systems"
20150402,"WO-2015047416-A1","Selecting operating systems based on a computing device mode","A computing device in accordance with an example includes a first operating system and a second operating system. The computing device includes a communication channel to exchange data between the first and second operating systems, and a controller to select one of the first and second operating systems based on a mode of the computing device, where the first and second operating systems are executed substantially in parallel on a processor of the computing device.","Operating Systems"
20040518,"US-6738796-B1","Optimization of memory requirements for multi-threaded operating systems","A system, method, and apparatus are disclosed for minimizing the memory required by memory management structures in a multi-threaded operating environment. The shortest necessary lifetime of a memory management structure is determined to allow the memory required to maintain the memory management structure to be reallocated for other uses when the memory management structure is no longer required. A memory management structure comprises a synchronization object for each data segment. A link list of synchronization nodes is also maintained to identify to the read thread a next data segment to be read and comprises a segment ready indicator that also indicates whether a data segment is available for access. If the segment ready indicator indicates to the read thread that the data segment is available for access, the read thread proceeds directly to reading the data segment without accessing the synchronization object. When the write thread has completed writing to a data segment, it can set the segment ready indicator of the synchronization node to indicate the data segment is available for the read thread and then destroy the synchronization object, freeing its memory for other uses. After reading the data segment, the read thread can then destroy the synchronization node, thus freeing the memory required to maintain this structure as well.","Operating Systems"
20080814,"WO-2008097695-A1","Supporting multiple operating systems in media devices","Techniques and tools for supporting multiple operating systems in consumer electronic devices. For example, techniques and tools are described that allow quickly switching between operating systems in video disc players that support different media types while reducing wait time and mitigating possible negative impacts to user experience.","Operating Systems"
20040331,"GB-2393538-A","An arrangement for supporting multiple operating systems wherein an operating system identifier is linked to at least one system component","A system and method for supporting multiple operating systems (101) with mutually exclusive requirements on a single computer system (200), or platform. The operating system (101) sets an ACPI (105) variable to identify the operating system (101) running on the platform (200). The system firmware (103) automatically comes up with a common set of functionality to satisfy all operating systems that can run on the platform. The ACPI interpreter (105) reads the OS (101) identifying variable upon boot-up and uses it in conditional code (107) that depends on the operating system (101) to fully define the operation of the system component (203, .., 215).","Operating Systems"
20081007,"US-7434201-B2","Method and apparatus providing for extendable interaction between firmware and operating systems on digital devices","A method, memory system, and program product is described for providing extended functions in a digital device conforming to an intercompartment language specification. The method involves preparing a list of unused opcodes according to a version of the language of one compartment, and publishing the list of unused opcodes to code of a second compartment. Code of the second compartment then assigns opcodes to extended functions such that the opcodes assigned are unused opcodes in the version of language of both compartments. The assigned opcodes are used in generating code in the intercompartmental language, and published as a table of assigned opcodes with associated function names to the first compartment.","Operating Systems"
20000817,"DE-19905960-A1","Computer with system back-up and multiple operating systems","The computer system includes system back-up and multiple operating systems. A specific device among several peripheral storage devices can be selected by using a system selection switch, and the operating system stored in that device will be used to boot the computer.- DETAILED DESCRIPTION - The computer (100) includes multiple peripheral storage devices (210,230) connected to the computer, and separately storing at least two operating systems. At least two peripheral control interfaces (120,130) are each connected to the computer and to at least one storage device by signal cables and/or power cords (901).A system selection switch (900) is installed between the interfaces and the storage devices, and is operated to connect the computer via a control interface with a specific storage device, and hence booted from one of several operating systems. INDEPENDENT CLAIMS are included for; a computer described with reference to the drawings of the invention","Operating Systems"
20140521,"CN-103812948-A","System and method for cloud interactive customization of smart phone operating systems","Disclosed is a system for cloud interactive customization of smart phone operating systems. The system comprises a client side and a customization cloud unit. A client side module comprises a customization management module and a user interaction module in a personal computer. The customization cloud unit includes a customization cloud management servicer, a smart phone operating system mirror database, customization resource data and a plurality of resource nodes; the customization cloud management servicer comprises a cloud interaction sub module, a smart phone adapter management sub module, a compatibility test sub module and a smart phone virtual machine management sub module. The invention further discloses a method for cloud interactive customization of smart phone operating systems. By the system and the method, users can customize smart phone operating systems by means of ';WYSIWY(what you see is what you get)'; visual interaction, adapter test is completed automatically according to types of smart phone platforms of the users, and the users can preview and try the smart phone operating systems which are customized based on cloud.","Operating Systems"
20150611,"US-2015160881-A1","System and method for transferring data between operating systems","Mechanisms for moving data between different operating systems in a dual OS computing device are discussed. More particularly, embodiments of the present invention utilize the clipboard facilities supported by the operating systems, along with firmware and helper software in each OS, to move data back and forth when switching between an active and inactive operating system. The clipboard contents are preserved in non-volatile storage that is not lost across the sleep-state transitions used to switch operating systems. Helper software analyzes the clipboard contents being copied and converts them into a format recognized by the current operating system and its applications.","Operating Systems"
20141028,"US-8874097-B1","Systems and methods for rapid availability of critical functionalities on devices using cellular operating systems","Systems ( 100 ) and methods ( 400 ) for operating a hybrid communication device ( 106 ). The methods involve executing at least one boot program. Responsive to the boot program, a first and second code are concurrently executed. The first code is operative for booting at least a real-time operating system on which a radio processor of the hybrid communication device is built. The second code is operative for booting at least a mobile operating system on which a cellular processor of the hybrid communication device is built. The radio processor provides support for wireless radio communication while the mobile operating system is booting.","Operating Systems"
20030918,"US-2003177367-A1","Controlling access to a disk drive in a computer system running multiple operating systems","In a first aspect and in a computer system that runs more than one operating system, a procedure for controlling access to a data storage device is provided. The data storage device stores a token which identifies the operating system to which the data storage device is assigned. An operating system seeking to access the data storage device is identified by a token, and if that token does not match the token stored in the data storage device, access to the data storage device is prevented.","Operating Systems"
20100324,"CN-101678980-A","Optimised guidance of documents in self-operating systems","A roller storage system for storing sheet-type objects, in particular bank notes, is proposed, comprising a first film drum (3), which can be rotatably driven by a motor, with a first strip-shaped film (7) as a storage strip, comprising a second film drum (4), which can be rotatably driven by a motor, with a second strip-shaped film (11) as a cover strip, and comprising a winding drum (1), which can be rotatably driven by a motor. The films (7, 11), for the reception of the sheet-type objects (20), can be wound from the two film drums (3, 4) onto the winding drum (1) and, for the dispensing ofthe sheet-type objects (20), can be wound from the winding drum (1) onto the two film drums (3, 4). A first deviating roller (9) between the first film drum (3) and the winding drum (1) serves for the diversion of the first film (7). A second deviating roller (13) between the second film drum (4) and the winding drum (1) serves for the diversion of the second film (11). The second deviating roller (13) is here arranged offset relative to the first deviating roller (9) in the direction of transport of the films (7, 11).","Operating Systems"
20081029,"EP-1986167-A1","Modular characteristic for surfaces of self-operating systems","The self service device has a housing (1) in which a data-entry device is provided, and a card reader (2) for smart cards (8). The housing or the data-entry device is provided with additional elements or additional particulates that are fluorescent and phosphorescent. The additional elements or additional particulates are distinguishable only in the infrared wavelength range of electromagnetic spectrum of the particles surrounding them.","Operating Systems"
20140918,"US-2014282057-A1","System for applying applications of different operating systems in one electronic device and method thereof","A method for applying a number of applications of different operating systems in one electronic device, includes: providing an icon interface and displaying the icon interface on a display unit of the electronic device. Detecting operations on the icon interface by a user and determining an icon selected by the user. Determining relationship information corresponding to the selected icon, and analyzing the relationship information to determine an application corresponding to the selected icon and determine an operating system supporting the application. Searching an operating system server running the operating system supporting the application, triggering the determined operating system server to execute the application corresponding to the selected icon. In addition, displaying an application interface of the operating system server on the display unit of the electronic device.","Operating Systems"
20060705,"CN-1797344-A","Compatible process method and device for operating systems of computer platforms","The invention is a computer platform operating system compatibility processing method and device, and the device at least comprises: old- version operating system installation identification module, old- version operating system compatibility activation module and old- version operating system compatibility prohibition module, and the invention can be applied to a computer platform, such as a server, to make the computer platform able to make new-version and old-version operating systems compatible, fox example, the new-version operating system can be a Windows Server 2003 or Windows2000 window operating system and the old-version operating system can be a Windows NT4.0 window operating system. The invention can make the hardware devices of new-version and old-version operating systems and servers have compatibility.","Operating Systems"
20090311,"CN-101382908-A","Method for synchronizing information of dual operating systems","A method for synchronizing information of dual operating systems is provided. The method is used for synchronizing information of a first operating system and a second operating system when an electronic device is switching from a first operating system to a second operating system. First, the second operating system sends an information requesting message to a controller of the electronic device when the first operating system is switched to the second operating system. The controller checks if the first operating system operates in a work mode. If the first operating system operates in the work mode, the controller forwards the information requesting message to the first operating system, so as to obtain the information of the first operating system. Finally, the second system synchronizes the information recorded therein according to the obtained information.","Operating Systems"
20140225,"US-8661458-B2","Multiprocessor system, and method for shared use of devices among operating systems of multiprocessor system","In a multiprocessor system with a plurality of Operating Systems (OSs) running thereon, each of the plurality of OSs has a device driver which accesses devices for shared use among the OSs. Each device driver has a task interface part which performs inter-Operating System communication at the Operating System (OS) kernel layer. A first device driver on one of the plurality of OSs includes a device interface part which accesses a device to be operated by a second device driver on a second one of the plurality of OSs. The task interface part of the second device driver receives a device access request from a task running on the second one of the plurality of OSs, adds processing request data to a request queue list of the first device driver, and returns a device access result to the task upon receipt of a notification from the device interface part.","Operating Systems"
20160413,"CN-105487972-A","WinPE (Windows Preinstallation Environment)-free software test method under multiple operating systems","The invention belongs to the field of computer application, and particularly relates to a WinPE (Windows Preinstallation Environment)-free software test method and system under multiple operating systems. The method comprises the following steps: successively starting each operating system; installing and starting a test program under each operating system, calling a test script file which aims at the test program, and generating a log file under the current system when the test program finishes a test operation. The system comprises an operating system startup module, a test program startup module, a test script file calling module, a log file generation module and an operating system startup judgment module, wherein the operating system startup module, the test program startup module, the test script file calling module, the log file generation module and the operating system startup judgment module are used for realizing the method. Since the method does not need third-party software and is free from WinPE startup, the method and does not relate to a permission problem and is high in stability. In addition, since the software test method can realize the automatic restart of the multiple operating systems, the software test method can realize an automatic test, omits work for artificially restarting a computer, and improves working efficiency.","Operating Systems"
20130716,"US-8489778-B2","Method and apparatus for using a single multi-function adapter with different operating systems","A flexible arrangement allows a single arrangement of Ethernet channel adapter (ECA) hardware functions to appear as needed to conform to various operating system deployment models. A PCI interface presents a logical model of virtual devices appropriate to the relevant operating system. Mapping parameters and values are associated with the packet streams to allow the packet streams to be properly processed according to the presented logical model and needed operations. Mapping occurs at both the host side and at the network side to allow the multiple operations of the ECA to be performed while still allowing proper delivery at each interface.","Operating Systems"
20091125,"KR-20090120717-A","System and method for detecting and managing malicious code in computer systems using microsoft windows operating systems","PURPOSE: A malicious code detection and a processing system and method in a computer system using a microsoft window operating system are provided to compare extracted Win32 API(Application Programming Interface) with the information stored in a database and detect/process the malicious code file. CONSTITUTION: A Win32 API extracting unit(210) extracts the Win32 API used in a process or file as the malicious code test object. A Win32 API analyzing unit(220) analyzes Win32 API extracted from the Win32 API extracting unit and extracts the analyzed information of the Win32 API. A malicious code judging unit(230) determines whether the detected process or file is malicious code or not based on the Win32 API analyzed information extracted from the Win32 API. A malicious code processing unit(240) processes the detected process or file determined as the malicious code by the malicious code judging unit.","Operating Systems"
20140611,"CN-103853664-A","Method and electronic device for achieving multiple operating systems","The invention discloses a method and an electronic device for achieving multiple operating systems. The method is applied to the electronic device, the electronic device comprises a hard disk, the hard disk comprises a plurality of partitions, and every partition corresponds to a unique logic snapshot table; a plurality of operating systems are installed in the electronic device and inside different partitions. The method comprises when a basic input/output system is in a POST (power on self test) process, determining a first logic snapshot table corresponding to a current operating system to be loaded from the plurality of logic snapshot tables; when read-write operation is performed on the hard disk in a logic block addressing mode, determining the hard disk position of a partition corresponding to the read-write operation through the first logic snapshot table. After all the operations above are achieved, the hard disk can be exclusively occupied for every operating system, so that consideration on coexistence of multiple operating systems can be avoided, and further engineered tasks can be simplified.","Operating Systems"
20130108,"US-8352876-B2","Interactive electronic book operating systems and methods","Interactive electronic book operating systems and methods for displaying and allowing customization of content of scientific, engineering and other technical and professional digital books. The display screen can include icons for forward and backward page turning, generating of dynamic indexing and tables of contents, bookmarking, color themes, floating pages, highlighting, adding sticky notes, hiding selected content on the pages, quizzing the reader, lecturing the reader, tutoring the reader, showing the reader additional designs and practical relevance, and allowing the instructor to generate uniform seed numbers for problems and designs and/or allowing the instructor to generate random seed values for problems and designs.","Operating Systems"
20150312,"WO-2015032002-A1","Systems and methods for grid operating systems in electric power systems","In an embodiment, a power distribution automation applications network includes multiple intelligent nodes in communication with, each other, each having a hardware and software platform, with data processing and communications functionality. The intelligent nodes are integrated or embedded with grid components, The nodes each implement a part or whole of a grid operating system that includes a set of software applications for automated and supervisory monitoring, control, protection, and optimization of an electric power system with embedded distributed energy resources and distributed information resources. The grid operating system both manages the grid and facilitates the integration of distributed energy resources and distributed information resources in an electric power system.","Operating Systems"
20040304,"JP-2004070953-A","Method for supporting multiple operating systems","PROBLEM TO BE SOLVED: To provide a system and a method for supporting multiple operating systems having mutually exclusive requirements in a single computer system, or a platform. 
     SOLUTION: The operating system 101 sets a variable of ACPI (Advanced Configuration and Power Interface) 105 to identify the operating systems 101 running on the platform 200. System firmware 103 automatically comes up with a common function set to satisfy all the operating systems that can run on the platform. An ACPI interpreter 105 reads an OS 101 identifying the variable upon boot-up and uses it in a conditional code 107 that depends on the operating system 101 to define the operation of the system component. 
     COPYRIGHT: (C)2004,JPO","Operating Systems"
20030318,"US-6536040-B1","Cross-platform program, system, and method having a system independent registry for use on operating systems irrespective of a registry equivalent","The system, method, and program of this invention enables a developer to write a platform independent program that can read, create, modify, delete, and enumerate registry type of information regardless of whether or not a targeted operating system supports a registry or registry equivalent functionality. More specifically, as disclosed herein, there is a global registry object for carrying out, i.e., mapping, registry functions or registry equivalent functions across multiple operating systems. A system independent registry, referred to as a registryDB object, is created for those systems that do not have a registry equivalent. In a preferred embodiment, the registryDB object provides a registry equivalent store for any operating system by using a text file that resembles a Java properties file; although any database or file system could be used to save the registry information.","Operating Systems"
20020515,"GB-2368945-A","Re-loading operating systems","An operating system may be stored in a reprogrammable memory (14). The memory (14) may store a primary operating system (22) and recovery operating system (20). The recovery operating system (20) may automatically obtain a new operating system to replace a corrupted or outdated operating system. In some embodiments, this avoids the need to call upon the user to load the new operating system through a disk drive and to undertake a time consuming installation procedure.","Operating Systems"
20030812,"US-6606742-B1","Object-oriented interface for portability to diverse operating systems or hardware platforms","An object-oriented interface is disclosed for conferring portability for object-oriented programming to diverse operating systems on diverse hardware platforms in a computer system. The object-oriented interface is executable on a plurality of different computer platforms and includes classes of object-oriented methods. The interface is responsive to the object-oriented programming which instantiates its objects from its own classes and invokes the object oriented methods of the interface. Operating system specific, procedural program logic is compiled for use on a given computer platform that includes given computer hardware and a given procedural operating system which is executable on the hardware. A determination is made if the object-oriented methods of the interface to be invoked during runtime execution are present in the program memory of the computer hardware. A runtime loader selectively loads into the program memory any required object-oriented methods of the interface during runtime before their invocation by the object-oriented programming. The object-oriented interface thereby provides native system services to the object-oriented programming from the given computer hardware and procedural operating system.","Operating Systems"
20140306,"WO-2014035710-A1","Layout and execution of operating systems using bpram","A software layout system is described herein that speeds up computer system boot time and/or application initialization time by moving constant data and executable code into byte-addressable, persistent random access memory (BPRAM). The system determines which components and aspects of the operating system or application change infrequently. From this information, the system builds a high performance BPRAM cache to provide faster access to these frequently used components, including the kernel. The result is that kernel or application code and data structures have a high performance access and execution time with regard to memory fetches. Thus, the software layout system provides a faster way to prepare operating systems and applications for normal operation and reduces the time spent on initialization.","Operating Systems"
20031007,"US-6631394-B1","Embedded system with interrupt handler for multiple operating systems","An embedded system ( 1 ) comprising at least one processor ( 2 ) for running an operating system (OS_A, OS_B). The embedded system ( 1 ) further comprises: 
     means ( 17, 401, 412 ) for running at least two operating systems (OS_A, OS_B) in said processor ( 2 ), 
     a first operating system (OS_A) comprising a first group of threads (THA 1,  THA 2,  THA_IDLE), 
     a second operating system (OS_B) comprising a second group of threads (THB 1,  THB 2,  THB_IDLE), 
     means (nFIQ, nIRQ, SWI) for generating an interrupt (FIQ, IRQ, SWI) to said processor ( 2 ), 
     means for examining ( 401, 603, 617 ) to the execution of which thread (THA 1,  THA 2,  THB 1,  THB 2,  THA_IDLE, THB_IDLE) the interrupt (FIQ, IRQ, SWI), that has come to the processor ( 2 ), affects, and 
     means ( 401, 412, 603, 609, 617 ) for transmitting interrupt data to said operating system (OS_A, OS_B) which relates to the thread (THA 1,  THA 2,  THB 1,  THB 2,  THA_IDLE, THB_IDLE) affecting the interrupt (FIQ, IRQ, SWI) received by the processor ( 2 ).","Operating Systems"
20050329,"US-6874014-B2","Chip multiprocessor with multiple operating systems","Multiple processors are mounted on a single die. The die is connected to a memory storing multiple operating systems or images of multiple operating systems. Each of the processors or a group of one or more of the processors is operable to execute a distinct one of the multiple operating systems. Therefore, resources for a single operating system may be dedicated to one processor or a group of processors. Consequently, a large number of processors mounted on a single die can operate efficiently.","Operating Systems"
20150709,"WO-2015100933-A1","Data processing method for realizing multiple operating systems and terminal device","Disclosed are a data processing method for realizing multiple operating systems and a terminal device. The terminal device has a display area, and is capable of running multiple operating systems at the same time by means of split-screen displaying. The method comprises: triggering a user operation, receiving a control instruction in response to the user operation, and performing data processing based on multiple concurrently running operating systems according to the control instruction.","Operating Systems"
20130213,"CN-102929713-A","Loosely coupled heterogeneous multi-core processing system supporting parallelism of multiple operating systems","The invention provides a loosely coupled heterogeneous multi-core processing system supporting parallelism of multiple operating systems. The loosely coupled heterogeneous multi-core processing system comprises a first processor and a second processor which are parallel, wherein the operating capacity and the power consumption of the first processor are greater than those of the second processor; the first processor and the second processor are provided with independent operating systems; the first processor is provided with a universal operating system; the second processor is provided with an embedded real-time operating system; and the embedded real-time operating system is used for accelerating startup loading of a mobile terminal. By the loosely coupled heterogeneous multi-core processing system architecture supporting parallelism of multiple operating systems of the embodiment of the invention, the energy utilization efficiency of the system is improved; and the relatively simple embedded operating systems are started in advance, the system starting time of the mobile terminal is reduced, and the use experience of a terminal user is enhanced.","Operating Systems"
20140326,"CN-103685434-A","Method, system and equipment for implementing various operating systems on terminal","Provided are a method, a system and a piece of equipment for implementing various operating systems on a terminal. The method for implementing various operating systems on a terminal comprises the following steps: a virtual environment is constructed on a server to virtually run an operating system of a user; the terminal requests to the server for accessing the operating system; and the server transmits the interface of the operating system to the terminal so as to display the interface on the terminal. According to the embodiment of the application, a user can display various operating systems on different terminals and use various application software and data running on the operating systems.","Operating Systems"
20030314,"JP-2003076954-A","Ic card using a plurality of operating systems, ic card processor and its method","PROBLEM TO BE SOLVED: To provide an IC card loaded with a plurality of IC card operating systems (OSs), an IC card processor capable of using the IC card and an IC card processing method. SOLUTION: An OS base part for controlling input/output to/from an external device, a plurality of IC card OSs for allowing the IC card to execute an application program for providing a prescribed function while referring to the OS base part and managing the program and an OS loader for decoding a command inputted from the external device, identifies an IC card OS capable of executing the command and starting the IC card OS are stored in a memory of the IC card. The external device transmits a command including the information of the IC card OS to the IC card, the IC card receives the command under the control of the OS base part and the OS loader decodes the information of the IC card OS included in the command, starts the IC card OS and allow the IC card to execute the command through the IC card OS.","Operating Systems"
20140610,"US-8751783-B2","Booting computing devices with EFI aware operating systems","Example embodiments disclosed herein relate to finding a boot loader on storage. A boot process for a computing device including storage including an extensible firmware interface aware operating system is started. The storage is searched for a boot loader associated with the extensible firmware interface aware operating system.","Operating Systems"
20110727,"CN-102135910-A","Method for switching operating systems and electronic device using same","The invention discloses a method for switching operating systems and an electronic device using the method. The electronic device includes a processor, a system memory comprising a first segment and a second segment, and a memory unit with system firmware stored therein. In the above method, when the current operating system is switched to a first operating system, a first resource description list is used, through the system firmware, for announcing that the first segment is available and that the second segment is reserved so that the first operating system is under a working state at the first segment and the second operating system is under a power-saving state at the second segment. When the current operating system is switched to the second operating system, a second resource description list is used, through the system firmware, for announcing that the second segment is available and that the first segment is reserved so that the second operating system is under the working state at the second segment and the first operating system is under the power-saving state at the first segment. According to the method, the switching of the operating systems can be faster and more power-saving.","Operating Systems"
20000323,"WO-0016193-A1","Managing multiple operating systems on a single computer","The invention addresses the management of multiple operating systems (100) on a single computer and other boot-time problems. A boot-time graphical user interface (132) is described, including support for menus, tabs, non-ASCII characters, and other graphical user interface components in the pre-boot environment. Approaches to organizing the storage and selection of multiple operating systems (100) are also presented, including the use of multiple directories which are identified in operating system boot sectors.","Operating Systems"
20050316,"CN-1595870-A","Method of remote parallel automatic installation of multiple types of operating systems via network","The invention provides a method for remotely and automatically installing in parallel multiple- type operating system network, establishing a system setup script template base and operating system setup program package in a setup source server and inserting component driver of object node server in the operating system setup program package; writing multifunctional combination guide program in a disc or a CD containing network connection program, and as setting up, under the guide of the above-mentioned guide program to automatically connect the setup source server through the Ethernet so as to download the operating system setup software package, and automatically completes setting up multiple-type operating systems. It can largely simplify setup course and increase work efficiency. It can be widely applied to setting up multiple-type operating systems at a network node, and thus, has a very good value in spreading using.","Operating Systems"
20121129,"US-2012304278-A1","Methods and systems for achieving high assurance computing using low assurance operating systems and processes","A device for providing a blended protection scheme for a high assurance communication device includes a reconfigurable firewall and packet inspection device for enforcing isolation and separation between a communication device';s CPUs, memory, and the communication device, where the reconfigurable firewall is implemented on an integrated chip or motherboard chipset. The device further includes a protected CPU that is adapted to manage security functions and to reconfigure the reconfigurable firewall. In embodiments, the device is a firewall and virus infection inspection system. In other embodiments the device is a virtual private network for network based communications.","Operating Systems"
20070718,"KR-20070075162-A","Apparatus and method for switching between operating systems","A device and a method for switching an OS(Operating System) are provided to offer a VM corresponding to the OS by receiving an OS selection, generating the VM corresponding to the selected OS, and booting the selected OS. An input part(110) receives a signal for selecting the OS among a plurality of OSs stored in a storing part(120). A VM generator(140) comprises an EFI(Extensible Firmware Interface), and generates the VM corresponding to the selected OS and booting the selected OS. The input part provides a signal for activating the OS and a display part(150) displays the activated OS. The VMs generated from the VM generator are independent with each other.","Operating Systems"
20151201,"US-9201814-B2","Electronic devices and methods for sharing peripheral devices in dual operating systems","A method for sharing peripheral devices in dual operating systems for an electronic device having at least one peripheral device is provided. The method includes: receiving a setting value for the peripheral device under the first operating system from a user; activating a second operating system; transmitting the setting value to the second operating system; and switching from the first operating system to the second operating system, wherein the second operating system sets the peripheral device with the setting value and enables the electronic device to operate under the second operating system.","Operating Systems"
20100825,"CN-101477511-B","Method and apparatus for sharing memory medium between multiple operating systems","The invention discloses a method and a device for realizing that a plurality of operation systems share a storage medium. The method comprises the following steps: an appointed first operation system in the operation systems directly operates the shared storage medium; when any second operation system in the operation systems needs to operate the shared storage medium, the second operation systeminforms the first operation system of an operation request through a inter-core communication mechanism; and the first operation system completes the operation to the shared storage medium according to the operation request and informs the second operation system of the operation result through the inter-core communication mechanism. The technical scheme of the invention is simple and efficient.","Operating Systems"
20070412,"US-2007083746-A1","Systems and methods for accelerated loading of operating systems and application programs","Systems and methods for providing accelerated loading of operating system and application programs upon system boot or application launch. In one aspect, a method for providing accelerated loading of an operating system comprises the steps of: maintaining a list of boot data used for booting a computer system; preloading the boot data upon initialization of the computer system; and servicing requests for boot data from the computer system using the preloaded boot data. The boot data may comprise program code associated with an operating system of the computer system, an application program, and a combination thereof. In a preferred embodiment, the boot data is retrieved from a boot device and stored in a cache memory device. In another aspect, the method for accelerated loading of an operating system comprises updating the list of boot data during the boot process, wherein updating comprises adding to the list any boot data requested by the computer system not previously stored in the list and/or removing from the list any boot data previously stored in the list and not requested by the computer system. In yet another aspect, the boot data is stored in a compressed format on the boot device and the preloaded boot data is decompressed prior to transmitting the preloaded boot data to the requesting system. In another aspect, a method for providing accelerated launching of an application program comprises the steps of: maintaining a list of application data associated with an application program; preloading the application data upon launching the application program; and servicing requests for application data from a computer system using the preloaded application data.","Operating Systems"
20090430,"WO-2007005562-A3","Shared file system management between independent operating systems","A shared file system may be updated by a non-native operating system writing information to a change file, while a native operating system is in a suspend or hibernation mode; after writing, the non-native operating system is placed in a suspend or hibernation mode and the native system activates and then retrieves the updated information from the change file and writes the updated information to a shared file system. The native operating system returns to a suspend or hibernate state before the non-native operating resumes operation. The updated information may be written as provided by the non-native operating system, or further updated by the native operating system before being written to the shared file system. The change file is created by the native operating system, and may be a reserved portion of the shared file system or may be a separate portion of non- volatile memory. The native and non-native operating systems operate both concurrently and independent of one another; thereby, preventing conflicts during file system updating.","Operating Systems"
20081127,"WO-2008079769-A3","System and method for synchronizing memory management functions of two disparate operating systems","A memory management interface is provided to synchronize the operation of two disparate operating systems (OSes) that are executing on the same data processing platform. In one embodiment, the first operating system is a legacy OS of the type that is generally associated with an enterprise-level data processing system such as a mainframe. In contrast, the second OS is of a type designed to execute on commodity hardware such as personal computers. The first OS communicates with the second OS via a control logic interface to establish its execution environment, and to perform memory management functions, This interface supports a two-phase boot process that ensures that all memory allocated to the first OS can be released if an error occurs that affects operations of the first OS. This prevents the development of memory leaks.","Operating Systems"
20150611,"WO-2015036860-A3","Line-rate packet filtering technique for general purpose operating systems","A method for mitigating denial of service attacks may include filtering out invalid packets from the received packets using a first filtering module, allowing the valid packets to pass through the first filtering module, and allowing some invalid packets to pass through the first filtering module. The method may also include passing the valid packets and the remaining invalid packets from the first filtering module to a second filtering module, filtering out more of the invalid packets using the second packet filtering module, allowing the valid packets to pass through the second filtering module, and allowing some invalid packets to pass through the second filtering module. The method may additionally include passing the valid packets and the remaining invalid packets to a protocol stack to filter the remaining invalid packets and pass the valid packets through to an application.","Operating Systems"
20140814,"WO-2014122415-A1","Virtualisation supporting guest operating systems using memory protection units","A processor (20) is provided with a first memory protection unit (38) applying a first set of permissions and a second memory protection unit (40) applying a second set of permissions. A memory access will only be permitted if both the first set of permissions and the second set of permissions are satisfied. The processor also includes a memory management unit (42) which serves to translate from virtual addresses VA to physical addresses PA. A selectable one of the first memory protection unit (38) and the memory management unit (42) is active at any given time under control of a selection bit set by a hypervisor program (2) executing at an exception level with higher privilege than the exception level at which the guest operating systems execute.","Operating Systems"
20150917,"US-2015264047-A1","Method and system for providing secure communication between multiple operating systems in a communication device","Present disclosure provides a method and system for providing a secure communication between multiple operating systems in a communication device. A primary operating system in the communication device is loaded. An authentication check of one or more secondary operating systems in the communication device is performed through the primary operating system, wherein the one or more secondary operating systems are authenticated based on rule assignation. A secure communication is enables between the one or more secondary operating systems after the authentication.","Operating Systems"
20000908,"JP-2000242512-A","Computer executing plural operating systems","PROBLEM TO BE SOLVED: To switch operating systems to be operated by considering the significance of tasks to be executed on respective operating systems. SOLUTION: Plural operating systems performing execution according to priorities allocated to plural processes or threads respectively have the processing of priority notification 120 and 121 notifying the priority of a process or thread in the middle of execution. Then, the processing of priority conversion 122 converting priorities notified from the respective operating systems into a common priority (normalization priority) in a computer and the processing of priority comparison 124 which compares normalization priorities obtained by the processing of the conversion 122 and preferentially executes an operating system having a higher normalization priority are executed.","Operating Systems"
20000224,"WO-0010146-A1","Method and system for enabling wireless data communications between electronic devices having disparate operating systems","A method and System for Enabling Wireless Data Communications with Electronic Devices having Disparate Operating Systems is disclosed. Also disclosed is a system that compares the Infrared or RF communications configuration of an electronic appliance to a target profile, and then uploads the target configuration profile to the appliance, if necessary. The preferred device and system perform a functional testing on the wireless communications system of the electronic appliance, including the transceiver hardware and all device drivers and software stacks. Furthermore, the device of the present invention is able to adopt the target configuration from an electronic appliance by downloading it from one or more appliances. Still further, the device of the present invention is able to communicate with two or more electronic appliances simultaneously. The device and system of the present invention are operable independent of the BIOS of the electronic appliance(s) to be configured. Finally, the method of the present invention includes steps for comparing the wireless communications configuration of an electronic appliance to a target configuration and then uploading the target system and testing the electronic appliance for operability with the new configuration.","Operating Systems"
20000307,"US-6035396-A","Method for sharing a storage medium between computers having disparate operating systems","A disk can store data from two different operating systems, particularly DOS and MAC OS formats. The initial sector on the disk, sector zero, is divided between the operating systems, allowing two sector signatures. As a result, DOS recognizes the disk as valid and the MAC OS can support a driver on the disk. According to another aspect of the invention, the DOS portion of the dual-format disk is reclaimed by having a software program start its execution on the dual-format disk then switch its execution to another storage device. As a result, the program can dismount the dual-format disk and safely reclaim it for use on the MAC OS.","Operating Systems"
20110125,"US-7877526-B2","Data processing system having a channel adapter shared by multiple operating systems","A data processing system including a processing unit on which a control program runs, a plurality of operating systems (OS';s) configured to run under control of said control program, a Peripheral Component Interchange (PCI) bus coupled to the processing unit, and a channel adaptor for data transmission/reception, wherein: the channel adaptor is coupled to the PCI bus on a PCI bus side of the channel adapter, and the channel adapter includes only one connecting port on an input/output (I/O) side of the channel adapter; an input/output process is executed between each OS and said channel adaptor by using input/output process control data specifying input/output (I/O) data, the input/output process control data being provided via a Queue Pair having a Queue Pair identifier and including a Send Queue, Receive Queue and Complete Queue; configuration information is provided, exclusively defining the Queue Pair identifier of said Queue Pair of said input/output process control data which is usable exclusively by each respective OS; said channel adaptor can process a plurality of input/output process control data; and each OS uses said input/output process control data corresponding to a unique usable Queue Pair identifier and defined in said configuration information, and thereby a plurality of OS';s control input/output process control data having different Queue Pair identifiers relative to said channel adaptor to execute the input/output process without sharing said input/output process control data for said channel adaptor by different OS';s.","Operating Systems"
20141002,"WO-2014159444-A1","Systems and methods of using a hypervisor with guest operating systems and virtual processors","An apparatus includes a processor and a guest operating system. In response to receiving a request to create a task, the guest operating system requests a hypervisor to create a virtual processor to execute the requested task. The virtual processor is schedulable on the processor.","Operating Systems"
20160126,"US-9244736-B2","Thinning operating systems","Thinning operating systems can include monitoring a number of functionalities of an operating system, the number of functionalities of the operating system being provided by a number of computing components loaded thereon. Thinning operating systems can include automatically identifying an undesired functionality of the number of functionalities during runtime and removing from the operating system at least one of the number of computing components providing the undesired functionality as a result of the automatic identification to thin the OS.","Operating Systems"
20150610,"CN-104699489-A","Multiple operating systems based embedded software platform","The invention relates to the field of embedding and provides a multiple operating systems based embedded software platform comprising an operating system adapter module, an operating system transplanting module, a drive support module and a routing communication module. The multiple operating systems based embedded software platform has the advantages that an application is imparted sufficient transplantability and reusability, a user need not pay attention on an operating system and a central processing unit in use, the development cost of the embedded processing unit can be greatly decreased, and the development cycle of the embedded processing unit is greatly shortened.","Operating Systems"
20130919,"US-2013247065-A1","Apparatus and method for executing multi-operating systems","An apparatus and method for executing multi-operating systems (OS) are provided. Resources allocated to the respective multi-OSs are managed by management applications of the multi-OSs. A processor executes a plurality of multi-OSs. Each of the plurality of multi-OSs executes the management application. Each of the plurality of multi-OSs regards a resource held by another multi-OS among the plurality of multi-OSs as used by the corresponding management application, thereby preventing the resource from being allocated to another application included in the multi-OS.","Operating Systems"
20151015,"WO-2015156627-A1","Method for executing dual operating systems of smart phone","A smart phone according to an embodiment of the present invention suggests a method for accessing dual environments in a lock screen. The method may comprise: a step for receiving an inputted password or release pattern in a lock screen of a smart phone; and a step for providing smart phone environments different from each other according to the inputted password.","Operating Systems"
20120103,"US-8090936-B2","Systems and methods for accelerated loading of operating systems and application programs","Systems and methods are disclosed for providing accelerated loading of operating system and application programs. In one aspect, a method for providing accelerated loading of an operating system comprises the steps of: maintaining a list of boot data; preloading the boot data upon initialization of the computer system; and servicing requests for boot data from the computer system using the preloaded boot data. In a preferred embodiment, the boot data is retrieved from a boot device and stored in a cache memory device. In another aspect, a method for accelerated loading of an operating system comprises updating the list of boot data during the boot process, wherein updating comprises adding to the list any boot data requested by the computer system not previously stored in the list and/or removing from the list any boot data previously stored in the list and not requested by the computer system.","Operating Systems"
20060815,"US-7093166-B2","Method and apparatus for testing physical memory in an information handling system under conventional operating systems","An information handling system includes at least one microprocessor, a physical memory coupled to the at least one microprocessor, and a physical memory testing subsystem. The physical memory is configured to store an operating system. The physical memory testing subsystem is configured for a) querying the operating system for the size of the physical memory and a number of microprocessors, b) in response to the number of microprocessors, creating memory tester threads equal in number to the number of microprocessors, c) in response to the size of the physical memory, allocating memory chunks of a virtual memory to be on the order of the size of the physical memory, d) dividing the allocated memory chunks equally among the memory tester threads, e) creating a scanner thread, and f) executing the memory tester threads and scanner thread, wherein the scanner thread is configured to increase the probability of maintaining the allocated memory in physical memory for a duration of physical memory testing by the memory tester threads.","Operating Systems"
20110913,"US-8020163-B2","Heterogeneous multiprocessor network on chip devices, methods and operating systems for control thereof","Network on Chip (NoC) Devices, especially Heterogeneous Multiprocessor Network on Chip Devices are described, that optionally contain Reconfigurable Hardware Tiles, as well as Methods and Operating Systems (OS) for Control thereof. In accordance with an aspect of the present invention the Operating Systems handle either (a) run-time traffic management methods or (b) task migration methods, or a combination of these methods. The Operating Systems may be partly distributed but with a centralized master. The traffic management methods and apparatus of the invention use a statistical QoS approach. A system is described having an at least dual Network on Chip as well as methods of operating the same. The system has at least an on-chip communications network, comprising a first on-chip data traffic network (data NoC) and a second on-chip control traffic network (control NoC), having a control network interface component (control NIC) and a data network interface component (data NIC).","Operating Systems"
20050907,"GB-2411751-A","Improvements relating to reduced-overhead context-saving in static priority scheduled operating systems","There are disclosed methods, computing devices and software products that seek to reduce memory/processor overheads in static priority scheduled operating systems by reducing the number of resource contexts that need to be saved and restored when running a plurality of tasks. This may be achieved by forming mutually-exclusive non-pre-emption groups of tasks, and/or by determining which tasks share a common resource.","Operating Systems"
20101014,"WO-2010116262-A1","Apparatus and operating systems for manufacturing impregnated wood","Furfurylated wood (314) is produced in a two-chamber system in which monomer/oligomer impregnation (300) in an impregnation chamber (12) is followed by successive stages of drying (400) and curing (428) in a dedicated drying and curing chamber (204) initially set to dry impregnated wood (typically at a reduced pressure) and then to cure the at least partially dried, impregnated wood. Physical properties of wood under treatment are measured (412, 414, 434, 436), recorded (306, 342) and referenced (310, 342, 418, 450) into a database (34) that accumulates wood species data relating to applied temperature and pressure profiles, physical properties and appearance of intermediate and finished samples of wood and also chemical treatment regimes, including soak time and monomer/oligomer concentrations. During drying and curing, monitoring (430-436) of process parameters, including water removal and/or atmospheric conditions, are used by a controller (32) both to control and determine a state of process completion by comparing recorded data with historically accumulated data or process set point conditions. Physical and/or chemical attributes of finally processed wood (314) are used in an automated control loop to modify (456), reactively or in real time, applied treatment regimes (314, 404) for specific wood species and wood profiles.","Operating Systems"
20060330,"US-2006070069-A1","System and method for sharing resources between real-time and virtualizing operating systems","A system and method for sharing resources between real-time and virtualizing operating systems is presented. A computer system uses effective address mapping of support processors'; local memory to share resources between separate operating systems. When threads are created for either operating system, the thread';s corresponding processor memory is mapped into an effective address space. In doing so, the processor';s local memory is accessible by the thread, regardless of whether the processor is running, or whether the processor is executing a different thread from a different operating system. For example, a computer system may have eight support processors and running two operating systems whereby the first operating system requires six support processors and the second operating system requires all eight support processors. In this example, resources are virtualized and shared between the two operating systems in order to meet the requirements of both operating systems.","Operating Systems"
20070626,"US-7237238-B2","Method and apparatus for automated operating systems upgrade","A method for an automated operating system upgrade in an information handling system, from an older version to a newer version including initiating a preparation for the upgrade from an operating system upgrade preparation media. An eligibility of the information handling system for upgrade in response to the preparation is determined. The upgrade proceeds in response to an eligibility determination, otherwise upgrade preparation is terminated.","Operating Systems"
20130918,"EP-2638662-A1","Method and system for fingerprinting operating systems running on nodes in a communication network","Fingerprinting operating systems running on nodes in a communication network. Responsive to obtaining an event to be analyzed with respect to a given node, generating a group of two or more OS profiles matching the event; generating a sufficient set of one or more significant events, i.e. events obtained in order to identify, among the matching OS profiles in the generated group, the OS profile uniquely characterizing the OS running on the given node; upon obtaining a significant event from the given node, generating a new group of one or more matching OS profiles, wherein said new group is generated in accordance with said obtained significant event and at least, with one event previously analyzed with respect to the given node; and identifying the OS running on the given node with the help of said generated new group of one or more matching OS profiles.","Operating Systems"
20130502,"US-2013106689-A1","Methods of operating systems having optical input devices","A system may be provided that includes computing equipment and an optical input accessory. The computing equipment may use an imaging system to track the relative locations of light sources on the optical input device and to continuously capture images of optical markers on the optical input accessory and of user input objects. The computing equipment may be used to operate the system in operational modes that allow a user to record and playback musical sounds based on user input gathered with the optical input device, to generate musical sounds based on user input gathered with the optical input device and based on musical data received from a remote location, to provide musical instruction to a user of the optical input device, to generate a musical score using the optical input device, or to generate user instrument acoustic profiles.","Operating Systems"
20050818,"DE-102004005037-A1","Process and facility uses a consistency check to check operating systems and to detect malign programs","The goal of the invention is to detect and/or remove malignant software e.g. computer viruses from a computer system. An application boots up a malignant program checking software when booting up the computer system. At the same time the hardware of the computer system is checked. The application then reads stored data from the computer system and stores a corresponding image of the information with the possibility to store further unambiguous correlations of data. A comparison of the system image with previously created system images leads to the detection and possibly correction of changes and the cause for these changes.","Operating Systems"
20141008,"CN-104090805-A","Method, device and system for updating terminal operating systems","The embodiment of the invention discloses a method, device and system for updating terminal operating systems. The method comprises the steps of receiving an update result sent by a server, wherein the update result is generated after the server updates the first operating system corresponding to terminal identification corresponding to a terminal according to system update information; displaying the update result on the second operating system on the terminal. According to the method, device and system for updating the terminal operating systems, data of the terminal operating systems can be updated in time, the system security and the system stability are good, the time cost of updating the terminal can be shortened for users, and the user experience is improved.","Operating Systems"
20031120,"WO-03040884-A3","Budget transfer mechanism for time-partitioned real-time operating systems","A method is provided for optimizing CPU budgets associated with at least first and second threads executable in a time-partitioned real-time operating system. The first thread having a first CPU budget is executed, and at least a portion of the first thread';s unused CPU budget is transferred to the second thread.","Operating Systems"
20130702,"US-8478907-B1","Network interface device serving multiple host operating systems","A network interface device for use with a host computer that includes a host processor and a memory, and which is configured to concurrently run a master operating system and at least one virtual operating system. The device includes a bus interface that communicates over a bus with the host processor and the memory, and a network interface, which is coupled to send and receive data packets carrying data over a packet network. A protocol processor is coupled between the bus interface and the network interface so as to convey the data between the network interface and the memory while performing protocol processing on the data packets under instructions from the at least one virtual operating system, while bypassing the master operating system.","Operating Systems"
20170330,"US-2017094022-A1","Systems and methods for fingerprinting operating systems and software applications based on network resource access pattern","A system for fingerprinting operating system and/or other client software incorporates a server executing multiple logical servers, a data storage unit and DNS server. Upon receiving a client DNS query for resolving a domain name of a logical server, the DNS server provides multiple IP addresses for the server domain name. The order of the multiple IP addresses provided by the DNS server is changed in each DNS server response. The server then receives a request from the client using one of the IP addresses provided to the client by the DNS server. The information on the original order of the multiple IP addresses provided to the client by the DNS server and the one IP address chosen by the client for accessing the server are stored in the data storage. After accumulation of sufficient statistics, the stored data is analyzed and the client software fingerprint is created based thereon.","Operating Systems"
20060418,"US-7032116-B2","Thermal management for computer systems running legacy or thermal management operating systems","In one embodiment of the invention, a system management interrupt (SMI) handler is invoked in response to an SMI. The SMI handler determines a thermal state of a processor. The SMI handler interacts with one of a speed step technology applet and a thermal driver in a thermal management operating system to transition the processor to one of a low power state and a high power state based on the thermal state according to a native performance control status.","Operating Systems"
20010419,"WO-0036509-A3","Computer system and method for operating multiple operating systems in different partitions of the computer system and for allowing the different partitions to communicate with one another through shared memory","A computer system comprises a plurality of processing modules that can be configured into different partitions within the computer system, and a main memory. Each partition operates under the control of a separate operating system. At least one shared memory window is defined within the main memory to which multiple partitions have shared access, and each partition may also be assigned and exclusive memory window. Program code executing on different partitions enables those partitions to communicate with each other through the shared memory window. Means are also provided for mapping the physical address space of the processors in each partition to the respective exclusive memory windows assigned to each partition, so that the exclusive memory windows assigned to each partition appear to the respective operating systems executing on those partitions as if they all start at the same base address.","Operating Systems"
20160901,"WO-2016137272-A1","Method for controlling device having multiple operating systems installed therein, and device","Disclosed is a method for controlling a device having multiple operating systems installed therein, the method comprising: receiving a first user input for selecting at least one application installed in a first operating system among the multiple operating systems; receiving a second user input for selecting a second operating system, in which a shortcut icon for execution of the selected application is to be displayed, from among the multiple operating systems; generating the shortcut icon on the basis of the first user input and the second user input; and displaying the generated shortcut icon on the user interface of the second operating system.","Operating Systems"
20100901,"CN-101819538-A","Managing requests of operating systems executing in virtual machines","The invention relates to managing requests of operating systems executing in virtual machines. A coordinator (122) in a computer system (100) receives a request from one of a plurality of operating systems (104A, 104B) (that coexist in the computer system) to invoke a service of a management routine in the computer system. The plurality of operating systems execute in respective virtual machines of the computer system. The coordinator processes (102A, 102B) the received request to invoke the service of the management routine to prevent a conflict from occurring with respect to at least another one of the plurality of operating systems.","Operating Systems"
20160614,"US-9369823-B2","System and method for transferring software applications and data between two mobile devices with different operating systems","A method, machine and system enable the automated transfer of software applications between mobile devices that have different operating systems. A computer receives a first image of a first display screen of a first mobile device with at least one application (app) selection icon visible within the first image. The computer analyzes the first image to identify at least one software application from the at least one selection icon. The computer initiates a download of the at least one application identified to a second mobile device for installation of the at least one application on the second mobile device.","Operating Systems"
20041007,"WO-2004086228-A1","Security system and method for computer operating systems","A security system for a computer operating system comprising a processor (37) that is independent of the host CPU (13) for controlling access between the host CPU (13) and a security partition formed in the storage device (21) for storing the operating system. A program memory (41) that is independent of the computer memory and the storage device (21) unalterably stores and provides computer programs for operating the processor (37) in a manner so as to control access to the security partition in the storage device (21). All data access by the host CPU (13) to the data storage device (21) is blocked before initialisation of the security system and is intercepted immediately after the initialisation under the control of the processor (37). The processor (37) effects independent control of the host CPU (13) and configuration of the computer (11) to prevent unauthorised access to the security partition on the storage device (21) during the interception phase. All users of the computer (11) are authenticated with a prescribed profile of access to the operating system files in the security partition on the storage device (21) and data access to the storage device remains blocked until a user of the computer (11) is correctly authenticated.","Operating Systems"
20170323,"US-2017085664-A1","Passing data streams between remote cooperating systems","A method, computer program product, and/or system for facilitating communication between an origin machine and a target machine are provided. To facilitate communication, a reference to an original object of the origin machine is constructed within a remote object services level. Then reference is passed within the remote object services level from the origin machine to the target machine. The passing of the reference, in turn, causes a creation of a proxy and an invocation of a target method on the target machine.","Operating Systems"
20080626,"US-2008155246-A1","System and method for synchronizing memory management  functions of two disparate operating systems","A memory management interface is provided to synchronize the operation of two disparate operating systems (OSes) that are executing on the same data processing platform. In one embodiment, the first operating system is a legacy OS of the type that is generally associated with an enterprise-level data processing system such as a mainframe. In contrast, the second OS is of a type designed to execute on commodity hardware such as personal computers. The first OS communicates with the second OS via a control logic interface to establish its execution environment, and to perform memory management functions. This interface supports a two-phase boot process that ensures that all memory allocated to the first OS can be released if an error occurs that affects operations of the first OS. This prevents the development of memory leaks.","Operating Systems"
